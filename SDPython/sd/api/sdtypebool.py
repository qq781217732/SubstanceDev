# ADOBE CONFIDENTIAL
#
# Copyright 2020 Adobe
# All Rights Reserved.
#
# NOTICE:  Adobe permits you to use, modify, and distribute this file in
# accordance with the terms of the Adobe license agreement accompanying it.
# If you have received this file from a source other than Adobe,
# then your use, modification, or distribution of it requires the prior
# written permission of Adobe.
#
# Autogenerated by ipa. Don't edit directly, edit the definitions and regenerate it when changing
#

import ctypes
import base64
import sd
from .sdtypebasetype import SDTypeBaseType
from .sdapiobject import SDAPIObject
from .sdapiobject import SDApiError
from .apiexception import APIException

class SDTypeBool(SDTypeBaseType):
    """
    Class representing the bool type
    """
    def __init__(self, APIContext, handle, *args, **kwargs):
        """
        Constructor

        :rtype: SDTypeBool
        """
        SDTypeBaseType.__init__(self, APIContext, handle, *args, **kwargs)

    @staticmethod
    def sNew():
        """
        Create new SDTypeBool

        :rtype: SDTypeBool
        """
        outSDTypeBool = ctypes.c_void_p()
        _res = sd.getContext().SDTypeBool_sNew(ctypes.byref(outSDTypeBool))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = sd.getContext().mTypeMap[SDAPIObject(sd.getContext(), outSDTypeBool, ownHandle=False).getClassName()]
        return constructor(sd.getContext(), outSDTypeBool.value, ownHandle=True)

