# ADOBE CONFIDENTIAL
#
# Copyright 2020 Adobe
# All Rights Reserved.
#
# NOTICE:  Adobe permits you to use, modify, and distribute this file in
# accordance with the terms of the Adobe license agreement accompanying it.
# If you have received this file from a source other than Adobe,
# then your use, modification, or distribution of it requires the prior
# written permission of Adobe.
#
# Autogenerated by ipa. Don't edit directly, edit the definitions and regenerate it when changing
#

import ctypes
import base64
import sd
from .sdvalue import *
from .sdapiobject import *
from .sdapiobject import *
from .apiexception import APIException

class SDValueEnum(SDValue):
    def __init__(self, APIContext, handle, *args, **kwargs):
        """
        Constructor

        :rtype: SDValueEnum
        """
        SDValue.__init__(self, APIContext, handle, *args, **kwargs)

    @staticmethod
    def sFromValueId(enumTypeId, enumValueId):
        """
        Create new value from the specified enum value identifier

        :param enumTypeId: The name of the enum type
        :type enumTypeId: string
        :param enumValueId: The identifier of the enum value
        :type enumValueId: string
        :rtype: SDValueEnum
        """
        outSDValueEnum = ctypes.c_void_p()
        _res = sd.getContext().SDValueEnum_sFromValueId(ctypes.create_string_buffer(enumTypeId.encode('utf-8')), ctypes.create_string_buffer(enumValueId.encode('utf-8')), ctypes.byref(outSDValueEnum))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = sd.getContext().mTypeMap[SDAPIObject(sd.getContext(), outSDValueEnum, ownHandle=False).getClassName()]
        return constructor(sd.getContext(), outSDValueEnum.value, ownHandle=True)

    @staticmethod
    def sFromValue(enumTypeId, enumValue):
        """
        Create new value from the specified enum type Id

        :param enumTypeId: The name of the enum type Id
        :type enumTypeId: string
        :param enumValue: The value of the enum
        :type enumValue: int
        :rtype: SDValueEnum
        """
        outSDValueEnum = ctypes.c_void_p()
        _res = sd.getContext().SDValueEnum_sFromValue(ctypes.create_string_buffer(enumTypeId.encode('utf-8')), enumValue, ctypes.byref(outSDValueEnum))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = sd.getContext().mTypeMap[SDAPIObject(sd.getContext(), outSDValueEnum, ownHandle=False).getClassName()]
        return constructor(sd.getContext(), outSDValueEnum.value, ownHandle=True)

    def get(self):
        """
        Get the value as int

        :rtype: int
        """
        outValue = ctypes.c_int()
        _res = self.mAPIContext.SDValueEnum_get(self.mHandle, ctypes.byref(outValue))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return outValue.value

    def getValueId(self):
        """
        Get the value identifier

        :rtype: string
        """
        outValue = ctypes.c_char_p()
        _res = self.mAPIContext.SDValueEnum_getValueId(self.mHandle, ctypes.byref(outValue))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return outValue.value.decode('utf-8')

