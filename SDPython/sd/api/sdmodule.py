# ADOBE CONFIDENTIAL
#
# Copyright 2020 Adobe
# All Rights Reserved.
#
# NOTICE:  Adobe permits you to use, modify, and distribute this file in
# accordance with the terms of the Adobe license agreement accompanying it.
# If you have received this file from a source other than Adobe,
# then your use, modification, or distribution of it requires the prior
# written permission of Adobe.
#
# Autogenerated by ipa. Don't edit directly, edit the definitions and regenerate it when changing
#

import ctypes
import base64
from .sdarray import *
from .sddefinition import *
from .sdtype import *
from .sdapiobject import *
from .sdtype import *
from .sdapiobject import *
from .apiexception import APIException

class SDModule(SDAPIObject):
    """
    A SDModule is a set of related SDDefinition and SDType
    """
    def __init__(self, APIContext, handle, *args, **kwargs):
        """
        Constructor

        :rtype: SDModule
        """
        SDAPIObject.__init__(self, APIContext, handle, *args, **kwargs)

    def getId(self):
        """
        Get the identifier of the module

        :rtype: string
        """
        outId = ctypes.c_char_p()
        _res = self.mAPIContext.SDModule_getId(self.mHandle, ctypes.byref(outId))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return outId.value.decode('utf-8')

    def getDefinitions(self):
        """
        Get all SDDefinition available in the current module

        :rtype: SDArray[SDDefinition]
        """
        outSDDefinitionArray = ctypes.c_void_p()
        _res = self.mAPIContext.SDModule_getDefinitions(self.mHandle, ctypes.byref(outSDDefinitionArray))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outSDDefinitionArray, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outSDDefinitionArray.value, ownHandle=True)

    def getDefinitionFromId(self, sdDefinitionId):
        """
        Get the SDDefinition that matches the specified identifier

        :param sdDefinitionId: The identifier of the SDDefinition to retrieve
        :type sdDefinitionId: string
        :rtype: SDDefinition
        """
        outSDDefinition = ctypes.c_void_p()
        _res = self.mAPIContext.SDModule_getDefinitionFromId(self.mHandle, ctypes.create_string_buffer(sdDefinitionId.encode('utf-8')), ctypes.byref(outSDDefinition))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outSDDefinition, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outSDDefinition.value, ownHandle=True)

    def getTypes(self):
        """
        Get all SDTypes declared in the current module

        :rtype: SDArray[SDType]
        """
        outSDTypeArray = ctypes.c_void_p()
        _res = self.mAPIContext.SDModule_getTypes(self.mHandle, ctypes.byref(outSDTypeArray))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outSDTypeArray, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outSDTypeArray.value, ownHandle=True)

    def getTypeFromId(self, sdTypeId):
        """
        Get the SDType that matches the specified identifier

        :param sdTypeId: The identifier of the SDType to retrieve
        :type sdTypeId: string
        :rtype: SDType
        """
        outSDType = ctypes.c_void_p()
        _res = self.mAPIContext.SDModule_getTypeFromId(self.mHandle, ctypes.create_string_buffer(sdTypeId.encode('utf-8')), ctypes.byref(outSDType))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outSDType, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outSDType.value, ownHandle=True)

