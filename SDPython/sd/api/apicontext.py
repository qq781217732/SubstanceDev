# ADOBE CONFIDENTIAL
#
# Copyright 2020 Adobe
# All Rights Reserved.
#
# NOTICE:  Adobe permits you to use, modify, and distribute this file in
# accordance with the terms of the Adobe license agreement accompanying it.
# If you have received this file from a source other than Adobe,
# then your use, modification, or distribution of it requires the prior
# written permission of Adobe.
#
# Autogenerated by ipa. Don't edit directly, edit the definitions and regenerate it when changing
#

import ctypes
import base64
class APIContext:
    def __init__(self, dllHandle):
        self.mDllHandle = dllHandle
        self.mTypeMap = {}
        from .sdapiobject import SDAPIObject
        from .sdapiobject import SDApiError
        self.SDAPIObject_release = self.mDllHandle.SDAPIObject_release
        self.SDAPIObject_release.restype = ctypes.c_int
        self.SDAPIObject_release.argtypes = [ctypes.c_void_p]
        self.SDAPIObject_getClassName = self.mDllHandle.SDAPIObject_getClassName
        self.SDAPIObject_getClassName.restype = ctypes.c_int
        self.SDAPIObject_getClassName.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.mTypeMap['SDAPIObject'] = SDAPIObject
        from .sdbasetypes import SDBaseTypes
        from .sdbasetypes import bool2
        from .sdbasetypes import bool3
        from .sdbasetypes import bool4
        from .sdbasetypes import int2
        from .sdbasetypes import int3
        from .sdbasetypes import int4
        from .sdbasetypes import float2
        from .sdbasetypes import float3
        from .sdbasetypes import float4
        from .sdbasetypes import double2
        from .sdbasetypes import double3
        from .sdbasetypes import double4
        from .sdbasetypes import ColorRGB
        from .sdbasetypes import ColorRGBA
        from .sdbasetypes import SDGammaType
        self.mTypeMap['SDBaseTypes'] = SDBaseTypes
        from .sdtype import SDType
        from .sdtype import SDTypeModifier
        self.SDType_getId = self.mDllHandle.SDType_getId
        self.SDType_getId.restype = ctypes.c_int
        self.SDType_getId.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.SDType_getModifier = self.mDllHandle.SDType_getModifier
        self.SDType_getModifier.restype = ctypes.c_int
        self.SDType_getModifier.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)]
        self.mTypeMap['SDType'] = SDType
        from .sdtypevoid import SDTypeVoid
        self.SDTypeVoid_sNew = self.mDllHandle.SDTypeVoid_sNew
        self.SDTypeVoid_sNew.restype = ctypes.c_int
        self.SDTypeVoid_sNew.argtypes = [ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDTypeVoid'] = SDTypeVoid
        from .sdtypeenum import SDTypeEnum
        self.SDTypeEnum_sNew = self.mDllHandle.SDTypeEnum_sNew
        self.SDTypeEnum_sNew.restype = ctypes.c_int
        self.SDTypeEnum_sNew.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDTypeEnum_getEnumerators = self.mDllHandle.SDTypeEnum_getEnumerators
        self.SDTypeEnum_getEnumerators.restype = ctypes.c_int
        self.SDTypeEnum_getEnumerators.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDTypeEnum'] = SDTypeEnum
        from .sdtypebasetype import SDTypeBaseType
        self.mTypeMap['SDTypeBaseType'] = SDTypeBaseType
        from .sdtypebool import SDTypeBool
        self.SDTypeBool_sNew = self.mDllHandle.SDTypeBool_sNew
        self.SDTypeBool_sNew.restype = ctypes.c_int
        self.SDTypeBool_sNew.argtypes = [ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDTypeBool'] = SDTypeBool
        from .sdtypeint import SDTypeInt
        self.SDTypeInt_sNew = self.mDllHandle.SDTypeInt_sNew
        self.SDTypeInt_sNew.restype = ctypes.c_int
        self.SDTypeInt_sNew.argtypes = [ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDTypeInt'] = SDTypeInt
        from .sdtypefloat import SDTypeFloat
        self.SDTypeFloat_sNew = self.mDllHandle.SDTypeFloat_sNew
        self.SDTypeFloat_sNew.restype = ctypes.c_int
        self.SDTypeFloat_sNew.argtypes = [ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDTypeFloat'] = SDTypeFloat
        from .sdtypedouble import SDTypeDouble
        self.SDTypeDouble_sNew = self.mDllHandle.SDTypeDouble_sNew
        self.SDTypeDouble_sNew.restype = ctypes.c_int
        self.SDTypeDouble_sNew.argtypes = [ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDTypeDouble'] = SDTypeDouble
        from .sdtypestring import SDTypeString
        self.SDTypeString_sNew = self.mDllHandle.SDTypeString_sNew
        self.SDTypeString_sNew.restype = ctypes.c_int
        self.SDTypeString_sNew.argtypes = [ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDTypeString'] = SDTypeString
        from .sdtypevector import SDTypeVector
        self.SDTypeVector_getItemType = self.mDllHandle.SDTypeVector_getItemType
        self.SDTypeVector_getItemType.restype = ctypes.c_int
        self.SDTypeVector_getItemType.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDTypeVector_getSize = self.mDllHandle.SDTypeVector_getSize
        self.SDTypeVector_getSize.restype = ctypes.c_int
        self.SDTypeVector_getSize.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_size_t)]
        self.mTypeMap['SDTypeVector'] = SDTypeVector
        from .sdtypebool2 import SDTypeBool2
        self.SDTypeBool2_sNew = self.mDllHandle.SDTypeBool2_sNew
        self.SDTypeBool2_sNew.restype = ctypes.c_int
        self.SDTypeBool2_sNew.argtypes = [ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDTypeBool2'] = SDTypeBool2
        from .sdtypebool3 import SDTypeBool3
        self.SDTypeBool3_sNew = self.mDllHandle.SDTypeBool3_sNew
        self.SDTypeBool3_sNew.restype = ctypes.c_int
        self.SDTypeBool3_sNew.argtypes = [ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDTypeBool3'] = SDTypeBool3
        from .sdtypebool4 import SDTypeBool4
        self.SDTypeBool4_sNew = self.mDllHandle.SDTypeBool4_sNew
        self.SDTypeBool4_sNew.restype = ctypes.c_int
        self.SDTypeBool4_sNew.argtypes = [ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDTypeBool4'] = SDTypeBool4
        from .sdtypeint2 import SDTypeInt2
        self.SDTypeInt2_sNew = self.mDllHandle.SDTypeInt2_sNew
        self.SDTypeInt2_sNew.restype = ctypes.c_int
        self.SDTypeInt2_sNew.argtypes = [ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDTypeInt2'] = SDTypeInt2
        from .sdtypeint3 import SDTypeInt3
        self.SDTypeInt3_sNew = self.mDllHandle.SDTypeInt3_sNew
        self.SDTypeInt3_sNew.restype = ctypes.c_int
        self.SDTypeInt3_sNew.argtypes = [ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDTypeInt3'] = SDTypeInt3
        from .sdtypeint4 import SDTypeInt4
        self.SDTypeInt4_sNew = self.mDllHandle.SDTypeInt4_sNew
        self.SDTypeInt4_sNew.restype = ctypes.c_int
        self.SDTypeInt4_sNew.argtypes = [ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDTypeInt4'] = SDTypeInt4
        from .sdtypefloat2 import SDTypeFloat2
        self.SDTypeFloat2_sNew = self.mDllHandle.SDTypeFloat2_sNew
        self.SDTypeFloat2_sNew.restype = ctypes.c_int
        self.SDTypeFloat2_sNew.argtypes = [ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDTypeFloat2'] = SDTypeFloat2
        from .sdtypefloat3 import SDTypeFloat3
        self.SDTypeFloat3_sNew = self.mDllHandle.SDTypeFloat3_sNew
        self.SDTypeFloat3_sNew.restype = ctypes.c_int
        self.SDTypeFloat3_sNew.argtypes = [ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDTypeFloat3'] = SDTypeFloat3
        from .sdtypefloat4 import SDTypeFloat4
        self.SDTypeFloat4_sNew = self.mDllHandle.SDTypeFloat4_sNew
        self.SDTypeFloat4_sNew.restype = ctypes.c_int
        self.SDTypeFloat4_sNew.argtypes = [ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDTypeFloat4'] = SDTypeFloat4
        from .sdtypedouble2 import SDTypeDouble2
        self.SDTypeDouble2_sNew = self.mDllHandle.SDTypeDouble2_sNew
        self.SDTypeDouble2_sNew.restype = ctypes.c_int
        self.SDTypeDouble2_sNew.argtypes = [ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDTypeDouble2'] = SDTypeDouble2
        from .sdtypedouble3 import SDTypeDouble3
        self.SDTypeDouble3_sNew = self.mDllHandle.SDTypeDouble3_sNew
        self.SDTypeDouble3_sNew.restype = ctypes.c_int
        self.SDTypeDouble3_sNew.argtypes = [ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDTypeDouble3'] = SDTypeDouble3
        from .sdtypedouble4 import SDTypeDouble4
        self.SDTypeDouble4_sNew = self.mDllHandle.SDTypeDouble4_sNew
        self.SDTypeDouble4_sNew.restype = ctypes.c_int
        self.SDTypeDouble4_sNew.argtypes = [ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDTypeDouble4'] = SDTypeDouble4
        from .sdtypecolorrgb import SDTypeColorRGB
        self.SDTypeColorRGB_sNew = self.mDllHandle.SDTypeColorRGB_sNew
        self.SDTypeColorRGB_sNew.restype = ctypes.c_int
        self.SDTypeColorRGB_sNew.argtypes = [ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDTypeColorRGB'] = SDTypeColorRGB
        from .sdtypecolorrgba import SDTypeColorRGBA
        self.SDTypeColorRGBA_sNew = self.mDllHandle.SDTypeColorRGBA_sNew
        self.SDTypeColorRGBA_sNew.restype = ctypes.c_int
        self.SDTypeColorRGBA_sNew.argtypes = [ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDTypeColorRGBA'] = SDTypeColorRGBA
        from .sdtypestruct import SDTypeStruct
        self.SDTypeStruct_sNew = self.mDllHandle.SDTypeStruct_sNew
        self.SDTypeStruct_sNew.restype = ctypes.c_int
        self.SDTypeStruct_sNew.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDTypeStruct_getMembers = self.mDllHandle.SDTypeStruct_getMembers
        self.SDTypeStruct_getMembers.restype = ctypes.c_int
        self.SDTypeStruct_getMembers.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDTypeStruct'] = SDTypeStruct
        from .sdtypematrix import SDTypeMatrix
        self.SDTypeMatrix_getItemType = self.mDllHandle.SDTypeMatrix_getItemType
        self.SDTypeMatrix_getItemType.restype = ctypes.c_int
        self.SDTypeMatrix_getItemType.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDTypeMatrix_getColumnCount = self.mDllHandle.SDTypeMatrix_getColumnCount
        self.SDTypeMatrix_getColumnCount.restype = ctypes.c_int
        self.SDTypeMatrix_getColumnCount.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_size_t)]
        self.SDTypeMatrix_getRowCount = self.mDllHandle.SDTypeMatrix_getRowCount
        self.SDTypeMatrix_getRowCount.restype = ctypes.c_int
        self.SDTypeMatrix_getRowCount.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_size_t)]
        self.mTypeMap['SDTypeMatrix'] = SDTypeMatrix
        from .sdtypearray import SDTypeArray
        self.SDTypeArray_getItemType = self.mDllHandle.SDTypeArray_getItemType
        self.SDTypeArray_getItemType.restype = ctypes.c_int
        self.SDTypeArray_getItemType.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDTypeArray_getSize = self.mDllHandle.SDTypeArray_getSize
        self.SDTypeArray_getSize.restype = ctypes.c_int
        self.SDTypeArray_getSize.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_size_t)]
        self.mTypeMap['SDTypeArray'] = SDTypeArray
        from .sdtypetexture import SDTypeTexture
        self.SDTypeTexture_sNew = self.mDllHandle.SDTypeTexture_sNew
        self.SDTypeTexture_sNew.restype = ctypes.c_int
        self.SDTypeTexture_sNew.argtypes = [ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDTypeTexture'] = SDTypeTexture
        from .sdtypeusage import SDTypeUsage
        self.SDTypeUsage_sNew = self.mDllHandle.SDTypeUsage_sNew
        self.SDTypeUsage_sNew.restype = ctypes.c_int
        self.SDTypeUsage_sNew.argtypes = [ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDTypeUsage'] = SDTypeUsage
        from .sdtypecustom import SDTypeCustom
        self.mTypeMap['SDTypeCustom'] = SDTypeCustom
        from .mdl.sdmdltype import SDMDLType
        self.mTypeMap['SDMDLType'] = SDMDLType
        from .mdl.sdmdltypealias import SDMDLTypeAlias
        self.mTypeMap['SDMDLTypeAlias'] = SDMDLTypeAlias
        from .mdl.sdmdltypecall import SDMDLTypeCall
        self.mTypeMap['SDMDLTypeCall'] = SDMDLTypeCall
        from .mdl.sdmdltypeparameterreference import SDMDLTypeParameterReference
        self.mTypeMap['SDMDLTypeParameterReference'] = SDMDLTypeParameterReference
        from .mdl.sdmdltypereference import SDMDLTypeReference
        self.mTypeMap['SDMDLTypeReference'] = SDMDLTypeReference
        from .mdl.sdmdltypedf import SDMDLTypeDF
        self.mTypeMap['SDMDLTypeDF'] = SDMDLTypeDF
        from .mdl.sdmdltypebsdf import SDMDLTypeBSDF
        self.mTypeMap['SDMDLTypeBSDF'] = SDMDLTypeBSDF
        from .mdl.sdmdltypeedf import SDMDLTypeEDF
        self.mTypeMap['SDMDLTypeEDF'] = SDMDLTypeEDF
        from .mdl.sdmdltypevdf import SDMDLTypeVDF
        self.mTypeMap['SDMDLTypeVDF'] = SDMDLTypeVDF
        from .mdl.sdmdltypehairbsdf import SDMDLTypeHairBSDF
        self.mTypeMap['SDMDLTypeHairBSDF'] = SDMDLTypeHairBSDF
        from .mdl.sdmdltyperesourcereference import SDMDLTypeResourceReference
        self.mTypeMap['SDMDLTypeResourceReference'] = SDMDLTypeResourceReference
        from .mdl.sdmdltypebsdfmeasurementreference import SDMDLTypeBSDFMeasurementReference
        self.mTypeMap['SDMDLTypeBSDFMeasurementReference'] = SDMDLTypeBSDFMeasurementReference
        from .mdl.sdmdltypelightprofilereference import SDMDLTypeLightProfileReference
        self.mTypeMap['SDMDLTypeLightProfileReference'] = SDMDLTypeLightProfileReference
        from .mdl.sdmdltypetexturereference import SDMDLTypeTextureReference
        from .mdl.sdmdltypetexturereference import TextureShape
        self.SDMDLTypeTextureReference_getTextureShape = self.mDllHandle.SDMDLTypeTextureReference_getTextureShape
        self.SDMDLTypeTextureReference_getTextureShape.restype = ctypes.c_int
        self.SDMDLTypeTextureReference_getTextureShape.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)]
        self.mTypeMap['SDMDLTypeTextureReference'] = SDMDLTypeTextureReference
        from .sdarray import SDArray
        self.SDArray_sNew = self.mDllHandle.SDArray_sNew
        self.SDArray_sNew.restype = ctypes.c_int
        self.SDArray_sNew.argtypes = [ctypes.POINTER(ctypes.c_void_p)]
        self.SDArray_getSize = self.mDllHandle.SDArray_getSize
        self.SDArray_getSize.restype = ctypes.c_int
        self.SDArray_getSize.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_size_t)]
        self.SDArray_getItem = self.mDllHandle.SDArray_getItem
        self.SDArray_getItem.restype = ctypes.c_int
        self.SDArray_getItem.argtypes = [ctypes.c_void_p, ctypes.c_size_t, ctypes.POINTER(ctypes.c_void_p)]
        self.SDArray_pushBack = self.mDllHandle.SDArray_pushBack
        self.SDArray_pushBack.restype = ctypes.c_int
        self.SDArray_pushBack.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
        self.mTypeMap['SDArray'] = SDArray
        from .sdtexture import SDTexture
        from .sdtexture import SBSPixelFormat
        self.SDTexture_getSize = self.mDllHandle.SDTexture_getSize
        self.SDTexture_getSize.restype = ctypes.c_int
        self.SDTexture_getSize.argtypes = [ctypes.c_void_p, ctypes.POINTER(int2)]
        self.SDTexture_getPixelFormat = self.mDllHandle.SDTexture_getPixelFormat
        self.SDTexture_getPixelFormat.restype = ctypes.c_int
        self.SDTexture_getPixelFormat.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)]
        self.SDTexture_getBytesPerPixel = self.mDllHandle.SDTexture_getBytesPerPixel
        self.SDTexture_getBytesPerPixel.restype = ctypes.c_int
        self.SDTexture_getBytesPerPixel.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_size_t)]
        self.SDTexture_save = self.mDllHandle.SDTexture_save
        self.SDTexture_save.restype = ctypes.c_int
        self.SDTexture_save.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_char_p]
        self.SDTexture_sFromFile = self.mDllHandle.SDTexture_sFromFile
        self.SDTexture_sFromFile.restype = ctypes.c_int
        self.SDTexture_sFromFile.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDTexture_getPixelBufferAddress = self.mDllHandle.SDTexture_getPixelBufferAddress
        self.SDTexture_getPixelBufferAddress.restype = ctypes.c_int
        self.SDTexture_getPixelBufferAddress.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_size_t)]
        self.SDTexture_getRowPitch = self.mDllHandle.SDTexture_getRowPitch
        self.SDTexture_getRowPitch.restype = ctypes.c_int
        self.SDTexture_getRowPitch.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_long)]
        self.mTypeMap['SDTexture'] = SDTexture
        from .sdvalue import SDValue
        self.SDValue_getType = self.mDllHandle.SDValue_getType
        self.SDValue_getType.restype = ctypes.c_int
        self.SDValue_getType.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDValue'] = SDValue
        from .sdvaluebasetype import SDValueBaseType
        self.mTypeMap['SDValueBaseType'] = SDValueBaseType
        from .sdvaluebool import SDValueBool
        self.SDValueBool_sNew = self.mDllHandle.SDValueBool_sNew
        self.SDValueBool_sNew.restype = ctypes.c_int
        self.SDValueBool_sNew.argtypes = [ctypes.c_bool, ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueBool_get = self.mDllHandle.SDValueBool_get
        self.SDValueBool_get.restype = ctypes.c_int
        self.SDValueBool_get.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_bool)]
        self.mTypeMap['SDValueBool'] = SDValueBool
        from .sdvalueint import SDValueInt
        self.SDValueInt_sNew = self.mDllHandle.SDValueInt_sNew
        self.SDValueInt_sNew.restype = ctypes.c_int
        self.SDValueInt_sNew.argtypes = [ctypes.c_int, ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueInt_get = self.mDllHandle.SDValueInt_get
        self.SDValueInt_get.restype = ctypes.c_int
        self.SDValueInt_get.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)]
        self.mTypeMap['SDValueInt'] = SDValueInt
        from .sdvaluefloat import SDValueFloat
        self.SDValueFloat_sNew = self.mDllHandle.SDValueFloat_sNew
        self.SDValueFloat_sNew.restype = ctypes.c_int
        self.SDValueFloat_sNew.argtypes = [ctypes.c_float, ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueFloat_get = self.mDllHandle.SDValueFloat_get
        self.SDValueFloat_get.restype = ctypes.c_int
        self.SDValueFloat_get.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_float)]
        self.mTypeMap['SDValueFloat'] = SDValueFloat
        from .sdvaluedouble import SDValueDouble
        self.SDValueDouble_sNew = self.mDllHandle.SDValueDouble_sNew
        self.SDValueDouble_sNew.restype = ctypes.c_int
        self.SDValueDouble_sNew.argtypes = [ctypes.c_double, ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueDouble_get = self.mDllHandle.SDValueDouble_get
        self.SDValueDouble_get.restype = ctypes.c_int
        self.SDValueDouble_get.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_double)]
        self.mTypeMap['SDValueDouble'] = SDValueDouble
        from .sdvaluestring import SDValueString
        self.SDValueString_sNew = self.mDllHandle.SDValueString_sNew
        self.SDValueString_sNew.restype = ctypes.c_int
        self.SDValueString_sNew.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueString_get = self.mDllHandle.SDValueString_get
        self.SDValueString_get.restype = ctypes.c_int
        self.SDValueString_get.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.mTypeMap['SDValueString'] = SDValueString
        from .sdvaluevector import SDValueVector
        self.mTypeMap['SDValueVector'] = SDValueVector
        from .sdvaluebool2 import SDValueBool2
        self.SDValueBool2_sNew = self.mDllHandle.SDValueBool2_sNew
        self.SDValueBool2_sNew.restype = ctypes.c_int
        self.SDValueBool2_sNew.argtypes = [ctypes.POINTER(bool2), ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueBool2_get = self.mDllHandle.SDValueBool2_get
        self.SDValueBool2_get.restype = ctypes.c_int
        self.SDValueBool2_get.argtypes = [ctypes.c_void_p, ctypes.POINTER(bool2)]
        self.mTypeMap['SDValueBool2'] = SDValueBool2
        from .sdvaluebool3 import SDValueBool3
        self.SDValueBool3_sNew = self.mDllHandle.SDValueBool3_sNew
        self.SDValueBool3_sNew.restype = ctypes.c_int
        self.SDValueBool3_sNew.argtypes = [ctypes.POINTER(bool3), ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueBool3_get = self.mDllHandle.SDValueBool3_get
        self.SDValueBool3_get.restype = ctypes.c_int
        self.SDValueBool3_get.argtypes = [ctypes.c_void_p, ctypes.POINTER(bool3)]
        self.mTypeMap['SDValueBool3'] = SDValueBool3
        from .sdvaluebool4 import SDValueBool4
        self.SDValueBool4_sNew = self.mDllHandle.SDValueBool4_sNew
        self.SDValueBool4_sNew.restype = ctypes.c_int
        self.SDValueBool4_sNew.argtypes = [ctypes.POINTER(bool4), ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueBool4_get = self.mDllHandle.SDValueBool4_get
        self.SDValueBool4_get.restype = ctypes.c_int
        self.SDValueBool4_get.argtypes = [ctypes.c_void_p, ctypes.POINTER(bool4)]
        self.mTypeMap['SDValueBool4'] = SDValueBool4
        from .sdvalueint2 import SDValueInt2
        self.SDValueInt2_sNew = self.mDllHandle.SDValueInt2_sNew
        self.SDValueInt2_sNew.restype = ctypes.c_int
        self.SDValueInt2_sNew.argtypes = [ctypes.POINTER(int2), ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueInt2_get = self.mDllHandle.SDValueInt2_get
        self.SDValueInt2_get.restype = ctypes.c_int
        self.SDValueInt2_get.argtypes = [ctypes.c_void_p, ctypes.POINTER(int2)]
        self.mTypeMap['SDValueInt2'] = SDValueInt2
        from .sdvalueint3 import SDValueInt3
        self.SDValueInt3_sNew = self.mDllHandle.SDValueInt3_sNew
        self.SDValueInt3_sNew.restype = ctypes.c_int
        self.SDValueInt3_sNew.argtypes = [ctypes.POINTER(int3), ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueInt3_get = self.mDllHandle.SDValueInt3_get
        self.SDValueInt3_get.restype = ctypes.c_int
        self.SDValueInt3_get.argtypes = [ctypes.c_void_p, ctypes.POINTER(int3)]
        self.mTypeMap['SDValueInt3'] = SDValueInt3
        from .sdvalueint4 import SDValueInt4
        self.SDValueInt4_sNew = self.mDllHandle.SDValueInt4_sNew
        self.SDValueInt4_sNew.restype = ctypes.c_int
        self.SDValueInt4_sNew.argtypes = [ctypes.POINTER(int4), ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueInt4_get = self.mDllHandle.SDValueInt4_get
        self.SDValueInt4_get.restype = ctypes.c_int
        self.SDValueInt4_get.argtypes = [ctypes.c_void_p, ctypes.POINTER(int4)]
        self.mTypeMap['SDValueInt4'] = SDValueInt4
        from .sdvaluefloat2 import SDValueFloat2
        self.SDValueFloat2_sNew = self.mDllHandle.SDValueFloat2_sNew
        self.SDValueFloat2_sNew.restype = ctypes.c_int
        self.SDValueFloat2_sNew.argtypes = [ctypes.POINTER(float2), ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueFloat2_get = self.mDllHandle.SDValueFloat2_get
        self.SDValueFloat2_get.restype = ctypes.c_int
        self.SDValueFloat2_get.argtypes = [ctypes.c_void_p, ctypes.POINTER(float2)]
        self.mTypeMap['SDValueFloat2'] = SDValueFloat2
        from .sdvaluefloat3 import SDValueFloat3
        self.SDValueFloat3_sNew = self.mDllHandle.SDValueFloat3_sNew
        self.SDValueFloat3_sNew.restype = ctypes.c_int
        self.SDValueFloat3_sNew.argtypes = [ctypes.POINTER(float3), ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueFloat3_get = self.mDllHandle.SDValueFloat3_get
        self.SDValueFloat3_get.restype = ctypes.c_int
        self.SDValueFloat3_get.argtypes = [ctypes.c_void_p, ctypes.POINTER(float3)]
        self.mTypeMap['SDValueFloat3'] = SDValueFloat3
        from .sdvaluefloat4 import SDValueFloat4
        self.SDValueFloat4_sNew = self.mDllHandle.SDValueFloat4_sNew
        self.SDValueFloat4_sNew.restype = ctypes.c_int
        self.SDValueFloat4_sNew.argtypes = [ctypes.POINTER(float4), ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueFloat4_get = self.mDllHandle.SDValueFloat4_get
        self.SDValueFloat4_get.restype = ctypes.c_int
        self.SDValueFloat4_get.argtypes = [ctypes.c_void_p, ctypes.POINTER(float4)]
        self.mTypeMap['SDValueFloat4'] = SDValueFloat4
        from .sdvaluedouble2 import SDValueDouble2
        self.SDValueDouble2_sNew = self.mDllHandle.SDValueDouble2_sNew
        self.SDValueDouble2_sNew.restype = ctypes.c_int
        self.SDValueDouble2_sNew.argtypes = [ctypes.POINTER(double2), ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueDouble2_get = self.mDllHandle.SDValueDouble2_get
        self.SDValueDouble2_get.restype = ctypes.c_int
        self.SDValueDouble2_get.argtypes = [ctypes.c_void_p, ctypes.POINTER(double2)]
        self.mTypeMap['SDValueDouble2'] = SDValueDouble2
        from .sdvaluedouble3 import SDValueDouble3
        self.SDValueDouble3_sNew = self.mDllHandle.SDValueDouble3_sNew
        self.SDValueDouble3_sNew.restype = ctypes.c_int
        self.SDValueDouble3_sNew.argtypes = [ctypes.POINTER(double3), ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueDouble3_get = self.mDllHandle.SDValueDouble3_get
        self.SDValueDouble3_get.restype = ctypes.c_int
        self.SDValueDouble3_get.argtypes = [ctypes.c_void_p, ctypes.POINTER(double3)]
        self.mTypeMap['SDValueDouble3'] = SDValueDouble3
        from .sdvaluedouble4 import SDValueDouble4
        self.SDValueDouble4_sNew = self.mDllHandle.SDValueDouble4_sNew
        self.SDValueDouble4_sNew.restype = ctypes.c_int
        self.SDValueDouble4_sNew.argtypes = [ctypes.POINTER(double4), ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueDouble4_get = self.mDllHandle.SDValueDouble4_get
        self.SDValueDouble4_get.restype = ctypes.c_int
        self.SDValueDouble4_get.argtypes = [ctypes.c_void_p, ctypes.POINTER(double4)]
        self.mTypeMap['SDValueDouble4'] = SDValueDouble4
        from .sdvaluecolorrgb import SDValueColorRGB
        self.SDValueColorRGB_sNew = self.mDllHandle.SDValueColorRGB_sNew
        self.SDValueColorRGB_sNew.restype = ctypes.c_int
        self.SDValueColorRGB_sNew.argtypes = [ctypes.POINTER(ColorRGB), ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueColorRGB_get = self.mDllHandle.SDValueColorRGB_get
        self.SDValueColorRGB_get.restype = ctypes.c_int
        self.SDValueColorRGB_get.argtypes = [ctypes.c_void_p, ctypes.POINTER(ColorRGB)]
        self.mTypeMap['SDValueColorRGB'] = SDValueColorRGB
        from .sdvaluecolorrgba import SDValueColorRGBA
        self.SDValueColorRGBA_sNew = self.mDllHandle.SDValueColorRGBA_sNew
        self.SDValueColorRGBA_sNew.restype = ctypes.c_int
        self.SDValueColorRGBA_sNew.argtypes = [ctypes.POINTER(ColorRGBA), ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueColorRGBA_get = self.mDllHandle.SDValueColorRGBA_get
        self.SDValueColorRGBA_get.restype = ctypes.c_int
        self.SDValueColorRGBA_get.argtypes = [ctypes.c_void_p, ctypes.POINTER(ColorRGBA)]
        self.mTypeMap['SDValueColorRGBA'] = SDValueColorRGBA
        from .sdvalueenum import SDValueEnum
        self.SDValueEnum_sFromValueId = self.mDllHandle.SDValueEnum_sFromValueId
        self.SDValueEnum_sFromValueId.restype = ctypes.c_int
        self.SDValueEnum_sFromValueId.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueEnum_sFromValue = self.mDllHandle.SDValueEnum_sFromValue
        self.SDValueEnum_sFromValue.restype = ctypes.c_int
        self.SDValueEnum_sFromValue.argtypes = [ctypes.c_char_p, ctypes.c_int, ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueEnum_get = self.mDllHandle.SDValueEnum_get
        self.SDValueEnum_get.restype = ctypes.c_int
        self.SDValueEnum_get.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)]
        self.SDValueEnum_getValueId = self.mDllHandle.SDValueEnum_getValueId
        self.SDValueEnum_getValueId.restype = ctypes.c_int
        self.SDValueEnum_getValueId.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.mTypeMap['SDValueEnum'] = SDValueEnum
        from .sdvaluestruct import SDValueStruct
        self.SDValueStruct_sNew = self.mDllHandle.SDValueStruct_sNew
        self.SDValueStruct_sNew.restype = ctypes.c_int
        self.SDValueStruct_sNew.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueStruct_getPropertyValue = self.mDllHandle.SDValueStruct_getPropertyValue
        self.SDValueStruct_getPropertyValue.restype = ctypes.c_int
        self.SDValueStruct_getPropertyValue.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueStruct_setPropertyValue = self.mDllHandle.SDValueStruct_setPropertyValue
        self.SDValueStruct_setPropertyValue.restype = ctypes.c_int
        self.SDValueStruct_setPropertyValue.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]
        self.SDValueStruct_getPropertyValueFromId = self.mDllHandle.SDValueStruct_getPropertyValueFromId
        self.SDValueStruct_getPropertyValueFromId.restype = ctypes.c_int
        self.SDValueStruct_getPropertyValueFromId.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueStruct_setPropertyValueFromId = self.mDllHandle.SDValueStruct_setPropertyValueFromId
        self.SDValueStruct_setPropertyValueFromId.restype = ctypes.c_int
        self.SDValueStruct_setPropertyValueFromId.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_void_p]
        self.mTypeMap['SDValueStruct'] = SDValueStruct
        from .sdvaluearray import SDValueArray
        self.SDValueArray_sNew = self.mDllHandle.SDValueArray_sNew
        self.SDValueArray_sNew.restype = ctypes.c_int
        self.SDValueArray_sNew.argtypes = [ctypes.c_void_p, ctypes.c_size_t, ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueArray_getSize = self.mDllHandle.SDValueArray_getSize
        self.SDValueArray_getSize.restype = ctypes.c_int
        self.SDValueArray_getSize.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_size_t)]
        self.SDValueArray_getItem = self.mDllHandle.SDValueArray_getItem
        self.SDValueArray_getItem.restype = ctypes.c_int
        self.SDValueArray_getItem.argtypes = [ctypes.c_void_p, ctypes.c_size_t, ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueArray_setItem = self.mDllHandle.SDValueArray_setItem
        self.SDValueArray_setItem.restype = ctypes.c_int
        self.SDValueArray_setItem.argtypes = [ctypes.c_void_p, ctypes.c_size_t, ctypes.c_void_p]
        self.SDValueArray_pushBack = self.mDllHandle.SDValueArray_pushBack
        self.SDValueArray_pushBack.restype = ctypes.c_int
        self.SDValueArray_pushBack.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
        self.SDValueArray_get = self.mDllHandle.SDValueArray_get
        self.SDValueArray_get.restype = ctypes.c_int
        self.SDValueArray_get.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDValueArray'] = SDValueArray
        from .sdvaluetexture import SDValueTexture
        self.SDValueTexture_sNew = self.mDllHandle.SDValueTexture_sNew
        self.SDValueTexture_sNew.restype = ctypes.c_int
        self.SDValueTexture_sNew.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueTexture_get = self.mDllHandle.SDValueTexture_get
        self.SDValueTexture_get.restype = ctypes.c_int
        self.SDValueTexture_get.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDValueTexture'] = SDValueTexture
        from .sdvalueusage import SDValueUsage
        self.SDValueUsage_sNew = self.mDllHandle.SDValueUsage_sNew
        self.SDValueUsage_sNew.restype = ctypes.c_int
        self.SDValueUsage_sNew.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueUsage_get = self.mDllHandle.SDValueUsage_get
        self.SDValueUsage_get.restype = ctypes.c_int
        self.SDValueUsage_get.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDValueUsage'] = SDValueUsage
        from .sdvaluematrix import SDValueMatrix
        self.SDValueMatrix_sNew = self.mDllHandle.SDValueMatrix_sNew
        self.SDValueMatrix_sNew.restype = ctypes.c_int
        self.SDValueMatrix_sNew.argtypes = [ctypes.c_void_p, ctypes.c_size_t, ctypes.c_size_t, ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueMatrix_sNewFromSDTypeMatrix = self.mDllHandle.SDValueMatrix_sNewFromSDTypeMatrix
        self.SDValueMatrix_sNewFromSDTypeMatrix.restype = ctypes.c_int
        self.SDValueMatrix_sNewFromSDTypeMatrix.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueMatrix_getItem = self.mDllHandle.SDValueMatrix_getItem
        self.SDValueMatrix_getItem.restype = ctypes.c_int
        self.SDValueMatrix_getItem.argtypes = [ctypes.c_void_p, ctypes.c_size_t, ctypes.c_size_t, ctypes.POINTER(ctypes.c_void_p)]
        self.SDValueMatrix_setItem = self.mDllHandle.SDValueMatrix_setItem
        self.SDValueMatrix_setItem.restype = ctypes.c_int
        self.SDValueMatrix_setItem.argtypes = [ctypes.c_void_p, ctypes.c_size_t, ctypes.c_size_t, ctypes.c_void_p]
        self.SDValueMatrix_getColumnCount = self.mDllHandle.SDValueMatrix_getColumnCount
        self.SDValueMatrix_getColumnCount.restype = ctypes.c_int
        self.SDValueMatrix_getColumnCount.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_size_t)]
        self.SDValueMatrix_getRowCount = self.mDllHandle.SDValueMatrix_getRowCount
        self.SDValueMatrix_getRowCount.restype = ctypes.c_int
        self.SDValueMatrix_getRowCount.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_size_t)]
        self.mTypeMap['SDValueMatrix'] = SDValueMatrix
        from .sdvaluecustom import SDValueCustom
        self.SDValueCustom_sNew = self.mDllHandle.SDValueCustom_sNew
        self.SDValueCustom_sNew.restype = ctypes.c_int
        self.SDValueCustom_sNew.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDValueCustom'] = SDValueCustom
        from .mdl.sdmdlvalue import SDMDLValue
        self.mTypeMap['SDMDLValue'] = SDMDLValue
        from .mdl.sdmdlvaluealias import SDMDLValueAlias
        self.mTypeMap['SDMDLValueAlias'] = SDMDLValueAlias
        from .mdl.sdmdlvaluecall import SDMDLValueCall
        self.SDMDLValueCall_getValue = self.mDllHandle.SDMDLValueCall_getValue
        self.SDMDLValueCall_getValue.restype = ctypes.c_int
        self.SDMDLValueCall_getValue.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.SDMDLValueCall_setValue = self.mDllHandle.SDMDLValueCall_setValue
        self.SDMDLValueCall_setValue.restype = ctypes.c_int
        self.SDMDLValueCall_setValue.argtypes = [ctypes.c_void_p, ctypes.c_char_p]
        self.mTypeMap['SDMDLValueCall'] = SDMDLValueCall
        from .mdl.sdmdlvalueparameterreference import SDMDLValueParameterReference
        self.SDMDLValueParameterReference_getReferencedType = self.mDllHandle.SDMDLValueParameterReference_getReferencedType
        self.SDMDLValueParameterReference_getReferencedType.restype = ctypes.c_int
        self.SDMDLValueParameterReference_getReferencedType.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDMDLValueParameterReference'] = SDMDLValueParameterReference
        from .mdl.sdmdlvaluereference import SDMDLValueReference
        self.SDMDLValueReference_getValue = self.mDllHandle.SDMDLValueReference_getValue
        self.SDMDLValueReference_getValue.restype = ctypes.c_int
        self.SDMDLValueReference_getValue.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.SDMDLValueReference_setValue = self.mDllHandle.SDMDLValueReference_setValue
        self.SDMDLValueReference_setValue.restype = ctypes.c_int
        self.SDMDLValueReference_setValue.argtypes = [ctypes.c_void_p, ctypes.c_char_p]
        self.mTypeMap['SDMDLValueReference'] = SDMDLValueReference
        from .mdl.sdmdlvaluedf import SDMDLValueDF
        self.mTypeMap['SDMDLValueDF'] = SDMDLValueDF
        from .mdl.sdmdlvaluebsdf import SDMDLValueBSDF
        self.mTypeMap['SDMDLValueBSDF'] = SDMDLValueBSDF
        from .mdl.sdmdlvalueedf import SDMDLValueEDF
        self.mTypeMap['SDMDLValueEDF'] = SDMDLValueEDF
        from .mdl.sdmdlvaluevdf import SDMDLValueVDF
        self.mTypeMap['SDMDLValueVDF'] = SDMDLValueVDF
        from .mdl.sdmdlvaluehairbsdf import SDMDLValueHairBSDF
        self.mTypeMap['SDMDLValueHairBSDF'] = SDMDLValueHairBSDF
        from .mdl.sdmdlvalueresourcereference import SDMDLValueResourceReference
        self.mTypeMap['SDMDLValueResourceReference'] = SDMDLValueResourceReference
        from .mdl.sdmdlvaluebsdfmeasurementreference import SDMDLValueBSDFMeasurementReference
        self.mTypeMap['SDMDLValueBSDFMeasurementReference'] = SDMDLValueBSDFMeasurementReference
        from .mdl.sdmdlvaluelightprofilereference import SDMDLValueLightProfileReference
        self.mTypeMap['SDMDLValueLightProfileReference'] = SDMDLValueLightProfileReference
        from .mdl.sdmdlvaluetexturereference import SDMDLValueTextureReference
        self.mTypeMap['SDMDLValueTextureReference'] = SDMDLValueTextureReference
        from .sdvalueserializer import SDValueSerializer
        self.SDValueSerializer_sToString = self.mDllHandle.SDValueSerializer_sToString
        self.SDValueSerializer_sToString.restype = ctypes.c_int
        self.SDValueSerializer_sToString.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.mTypeMap['SDValueSerializer'] = SDValueSerializer
        from .sdcolorspace import SDColorSpace
        self.SDColorSpace_sConvert = self.mDllHandle.SDColorSpace_sConvert
        self.SDColorSpace_sConvert.restype = ctypes.c_int
        self.SDColorSpace_sConvert.argtypes = [ctypes.c_float, ctypes.c_char_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_float)]
        self.SDColorSpace_sConvertColorRGB = self.mDllHandle.SDColorSpace_sConvertColorRGB
        self.SDColorSpace_sConvertColorRGB.restype = ctypes.c_int
        self.SDColorSpace_sConvertColorRGB.argtypes = [ctypes.POINTER(ColorRGB), ctypes.c_char_p, ctypes.c_char_p, ctypes.POINTER(ColorRGB)]
        self.SDColorSpace_sConvertColorRGBA = self.mDllHandle.SDColorSpace_sConvertColorRGBA
        self.SDColorSpace_sConvertColorRGBA.restype = ctypes.c_int
        self.SDColorSpace_sConvertColorRGBA.argtypes = [ctypes.POINTER(ColorRGBA), ctypes.c_char_p, ctypes.c_char_p, ctypes.POINTER(ColorRGBA)]
        self.mTypeMap['SDColorSpace'] = SDColorSpace
        from .sdpackagemgr import SDPackageMgr
        self.SDPackageMgr_newUserPackage = self.mDllHandle.SDPackageMgr_newUserPackage
        self.SDPackageMgr_newUserPackage.restype = ctypes.c_int
        self.SDPackageMgr_newUserPackage.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDPackageMgr_loadUserPackage = self.mDllHandle.SDPackageMgr_loadUserPackage
        self.SDPackageMgr_loadUserPackage.restype = ctypes.c_int
        self.SDPackageMgr_loadUserPackage.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_bool, ctypes.c_bool, ctypes.POINTER(ctypes.c_void_p)]
        self.SDPackageMgr_unloadUserPackage = self.mDllHandle.SDPackageMgr_unloadUserPackage
        self.SDPackageMgr_unloadUserPackage.restype = ctypes.c_int
        self.SDPackageMgr_unloadUserPackage.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
        self.SDPackageMgr_getUserPackageFromFilePath = self.mDllHandle.SDPackageMgr_getUserPackageFromFilePath
        self.SDPackageMgr_getUserPackageFromFilePath.restype = ctypes.c_int
        self.SDPackageMgr_getUserPackageFromFilePath.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDPackageMgr_getUserPackages = self.mDllHandle.SDPackageMgr_getUserPackages
        self.SDPackageMgr_getUserPackages.restype = ctypes.c_int
        self.SDPackageMgr_getUserPackages.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDPackageMgr_getPackages = self.mDllHandle.SDPackageMgr_getPackages
        self.SDPackageMgr_getPackages.restype = ctypes.c_int
        self.SDPackageMgr_getPackages.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDPackageMgr_savePackageAs = self.mDllHandle.SDPackageMgr_savePackageAs
        self.SDPackageMgr_savePackageAs.restype = ctypes.c_int
        self.SDPackageMgr_savePackageAs.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_char_p]
        self.SDPackageMgr_savePackage = self.mDllHandle.SDPackageMgr_savePackage
        self.SDPackageMgr_savePackage.restype = ctypes.c_int
        self.SDPackageMgr_savePackage.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
        self.mTypeMap['SDPackageMgr'] = SDPackageMgr
        from .sdresource import SDResource
        from .sdresource import EmbedMethod
        self.SDResource_getType = self.mDllHandle.SDResource_getType
        self.SDResource_getType.restype = ctypes.c_int
        self.SDResource_getType.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDResource_getIdentifier = self.mDllHandle.SDResource_getIdentifier
        self.SDResource_getIdentifier.restype = ctypes.c_int
        self.SDResource_getIdentifier.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.SDResource_setIdentifier = self.mDllHandle.SDResource_setIdentifier
        self.SDResource_setIdentifier.restype = ctypes.c_int
        self.SDResource_setIdentifier.argtypes = [ctypes.c_void_p, ctypes.c_char_p]
        self.SDResource_getUrl = self.mDllHandle.SDResource_getUrl
        self.SDResource_getUrl.restype = ctypes.c_int
        self.SDResource_getUrl.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.SDResource_getFilePath = self.mDllHandle.SDResource_getFilePath
        self.SDResource_getFilePath.restype = ctypes.c_int
        self.SDResource_getFilePath.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.SDResource_getEmbedMethod = self.mDllHandle.SDResource_getEmbedMethod
        self.SDResource_getEmbedMethod.restype = ctypes.c_int
        self.SDResource_getEmbedMethod.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)]
        self.SDResource_getProperties = self.mDllHandle.SDResource_getProperties
        self.SDResource_getProperties.restype = ctypes.c_int
        self.SDResource_getProperties.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.POINTER(ctypes.c_void_p)]
        self.SDResource_getPropertyFromId = self.mDllHandle.SDResource_getPropertyFromId
        self.SDResource_getPropertyFromId.restype = ctypes.c_int
        self.SDResource_getPropertyFromId.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_int, ctypes.POINTER(ctypes.c_void_p)]
        self.SDResource_getPropertyValue = self.mDllHandle.SDResource_getPropertyValue
        self.SDResource_getPropertyValue.restype = ctypes.c_int
        self.SDResource_getPropertyValue.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDResource_setPropertyValue = self.mDllHandle.SDResource_setPropertyValue
        self.SDResource_setPropertyValue.restype = ctypes.c_int
        self.SDResource_setPropertyValue.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]
        self.SDResource_setInputPropertyValueFromId = self.mDllHandle.SDResource_setInputPropertyValueFromId
        self.SDResource_setInputPropertyValueFromId.restype = ctypes.c_int
        self.SDResource_setInputPropertyValueFromId.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_void_p]
        self.SDResource_setAnnotationPropertyValueFromId = self.mDllHandle.SDResource_setAnnotationPropertyValueFromId
        self.SDResource_setAnnotationPropertyValueFromId.restype = ctypes.c_int
        self.SDResource_setAnnotationPropertyValueFromId.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_void_p]
        self.SDResource_getPropertyValueFromId = self.mDllHandle.SDResource_getPropertyValueFromId
        self.SDResource_getPropertyValueFromId.restype = ctypes.c_int
        self.SDResource_getPropertyValueFromId.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_int, ctypes.POINTER(ctypes.c_void_p)]
        self.SDResource_getInputPropertyValueFromId = self.mDllHandle.SDResource_getInputPropertyValueFromId
        self.SDResource_getInputPropertyValueFromId.restype = ctypes.c_int
        self.SDResource_getInputPropertyValueFromId.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDResource_getAnnotationPropertyValueFromId = self.mDllHandle.SDResource_getAnnotationPropertyValueFromId
        self.SDResource_getAnnotationPropertyValueFromId.restype = ctypes.c_int
        self.SDResource_getAnnotationPropertyValueFromId.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDResource_getPropertyAnnotations = self.mDllHandle.SDResource_getPropertyAnnotations
        self.SDResource_getPropertyAnnotations.restype = ctypes.c_int
        self.SDResource_getPropertyAnnotations.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDResource_getPropertyAnnotationValueFromId = self.mDllHandle.SDResource_getPropertyAnnotationValueFromId
        self.SDResource_getPropertyAnnotationValueFromId.restype = ctypes.c_int
        self.SDResource_getPropertyAnnotationValueFromId.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDResource_setPropertyAnnotationValueFromId = self.mDllHandle.SDResource_setPropertyAnnotationValueFromId
        self.SDResource_setPropertyAnnotationValueFromId.restype = ctypes.c_int
        self.SDResource_setPropertyAnnotationValueFromId.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_char_p, ctypes.c_void_p]
        self.SDResource_getPropertyMetadataDictFromId = self.mDllHandle.SDResource_getPropertyMetadataDictFromId
        self.SDResource_getPropertyMetadataDictFromId.restype = ctypes.c_int
        self.SDResource_getPropertyMetadataDictFromId.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_int, ctypes.POINTER(ctypes.c_void_p)]
        self.SDResource_newProperty = self.mDllHandle.SDResource_newProperty
        self.SDResource_newProperty.restype = ctypes.c_int
        self.SDResource_newProperty.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_void_p, ctypes.c_int, ctypes.POINTER(ctypes.c_void_p)]
        self.SDResource_deleteProperty = self.mDllHandle.SDResource_deleteProperty
        self.SDResource_deleteProperty.restype = ctypes.c_int
        self.SDResource_deleteProperty.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
        self.SDResource_sNewFromFile = self.mDllHandle.SDResource_sNewFromFile
        self.SDResource_sNewFromFile.restype = ctypes.c_int
        self.SDResource_sNewFromFile.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_int, ctypes.POINTER(ctypes.c_void_p)]
        self.SDResource_getPackage = self.mDllHandle.SDResource_getPackage
        self.SDResource_getPackage.restype = ctypes.c_int
        self.SDResource_getPackage.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDResource_getMetadataDict = self.mDllHandle.SDResource_getMetadataDict
        self.SDResource_getMetadataDict.restype = ctypes.c_int
        self.SDResource_getMetadataDict.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDResource'] = SDResource
        from .sdresourcefolder import SDResourceFolder
        self.SDResourceFolder_sNew = self.mDllHandle.SDResourceFolder_sNew
        self.SDResourceFolder_sNew.restype = ctypes.c_int
        self.SDResourceFolder_sNew.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDResourceFolder_getChildren = self.mDllHandle.SDResourceFolder_getChildren
        self.SDResourceFolder_getChildren.restype = ctypes.c_int
        self.SDResourceFolder_getChildren.argtypes = [ctypes.c_void_p, ctypes.c_bool, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDResourceFolder'] = SDResourceFolder
        from .sdresourcebitmap import SDResourceBitmap
        self.SDResourceBitmap_sNew = self.mDllHandle.SDResourceBitmap_sNew
        self.SDResourceBitmap_sNew.restype = ctypes.c_int
        self.SDResourceBitmap_sNew.argtypes = [ctypes.c_void_p, ctypes.POINTER(int2), ctypes.POINTER(ColorRGBA), ctypes.POINTER(ctypes.c_void_p)]
        self.SDResourceBitmap_sNewFromFile = self.mDllHandle.SDResourceBitmap_sNewFromFile
        self.SDResourceBitmap_sNewFromFile.restype = ctypes.c_int
        self.SDResourceBitmap_sNewFromFile.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_int, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDResourceBitmap'] = SDResourceBitmap
        from .sdresourcefont import SDResourceFont
        self.SDResourceFont_sNewFromFile = self.mDllHandle.SDResourceFont_sNewFromFile
        self.SDResourceFont_sNewFromFile.restype = ctypes.c_int
        self.SDResourceFont_sNewFromFile.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_int, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDResourceFont'] = SDResourceFont
        from .sdresourcesvg import SDResourceSVG
        self.SDResourceSVG_sNew = self.mDllHandle.SDResourceSVG_sNew
        self.SDResourceSVG_sNew.restype = ctypes.c_int
        self.SDResourceSVG_sNew.argtypes = [ctypes.c_void_p, ctypes.POINTER(int2), ctypes.POINTER(ctypes.c_void_p)]
        self.SDResourceSVG_sNewFromFile = self.mDllHandle.SDResourceSVG_sNewFromFile
        self.SDResourceSVG_sNewFromFile.restype = ctypes.c_int
        self.SDResourceSVG_sNewFromFile.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_int, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDResourceSVG'] = SDResourceSVG
        from .sdresourcescene import SDResourceScene
        self.SDResourceScene_sGetAvailablePrimitiveDefinitions = self.mDllHandle.SDResourceScene_sGetAvailablePrimitiveDefinitions
        self.SDResourceScene_sGetAvailablePrimitiveDefinitions.restype = ctypes.c_int
        self.SDResourceScene_sGetAvailablePrimitiveDefinitions.argtypes = [ctypes.POINTER(ctypes.c_void_p)]
        self.SDResourceScene_sNewFromPrimitiveId = self.mDllHandle.SDResourceScene_sNewFromPrimitiveId
        self.SDResourceScene_sNewFromPrimitiveId.restype = ctypes.c_int
        self.SDResourceScene_sNewFromPrimitiveId.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDResourceScene_sNewFromFile = self.mDllHandle.SDResourceScene_sNewFromFile
        self.SDResourceScene_sNewFromFile.restype = ctypes.c_int
        self.SDResourceScene_sNewFromFile.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_int, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDResourceScene'] = SDResourceScene
        from .sdresourcebsdfmeasurement import SDResourceBSDFMeasurement
        self.SDResourceBSDFMeasurement_sNewFromFile = self.mDllHandle.SDResourceBSDFMeasurement_sNewFromFile
        self.SDResourceBSDFMeasurement_sNewFromFile.restype = ctypes.c_int
        self.SDResourceBSDFMeasurement_sNewFromFile.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_int, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDResourceBSDFMeasurement'] = SDResourceBSDFMeasurement
        from .sdresourcelightprofile import SDResourceLightProfile
        self.SDResourceLightProfile_sNewFromFile = self.mDllHandle.SDResourceLightProfile_sNewFromFile
        self.SDResourceLightProfile_sNewFromFile.restype = ctypes.c_int
        self.SDResourceLightProfile_sNewFromFile.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_int, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDResourceLightProfile'] = SDResourceLightProfile
        from .sdresourcecustom import SDResourceCustom
        self.SDResourceCustom_getFileContent = self.mDllHandle.SDResourceCustom_getFileContent
        self.SDResourceCustom_getFileContent.restype = ctypes.c_int
        self.SDResourceCustom_getFileContent.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.mTypeMap['SDResourceCustom'] = SDResourceCustom
        from .sdmetadatadict import SDMetadataDict
        self.SDMetadataDict_getProperties = self.mDllHandle.SDMetadataDict_getProperties
        self.SDMetadataDict_getProperties.restype = ctypes.c_int
        self.SDMetadataDict_getProperties.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDMetadataDict_getPropertyFromId = self.mDllHandle.SDMetadataDict_getPropertyFromId
        self.SDMetadataDict_getPropertyFromId.restype = ctypes.c_int
        self.SDMetadataDict_getPropertyFromId.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDMetadataDict_getPropertyValue = self.mDllHandle.SDMetadataDict_getPropertyValue
        self.SDMetadataDict_getPropertyValue.restype = ctypes.c_int
        self.SDMetadataDict_getPropertyValue.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDMetadataDict_setPropertyValue = self.mDllHandle.SDMetadataDict_setPropertyValue
        self.SDMetadataDict_setPropertyValue.restype = ctypes.c_int
        self.SDMetadataDict_setPropertyValue.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]
        self.SDMetadataDict_getPropertyValueFromId = self.mDllHandle.SDMetadataDict_getPropertyValueFromId
        self.SDMetadataDict_getPropertyValueFromId.restype = ctypes.c_int
        self.SDMetadataDict_getPropertyValueFromId.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDMetadataDict_setPropertyValueFromId = self.mDllHandle.SDMetadataDict_setPropertyValueFromId
        self.SDMetadataDict_setPropertyValueFromId.restype = ctypes.c_int
        self.SDMetadataDict_setPropertyValueFromId.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_void_p]
        self.SDMetadataDict_setPropertyURLFromResource = self.mDllHandle.SDMetadataDict_setPropertyURLFromResource
        self.SDMetadataDict_setPropertyURLFromResource.restype = ctypes.c_int
        self.SDMetadataDict_setPropertyURLFromResource.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_void_p]
        self.SDMetadataDict_deleteProperty = self.mDllHandle.SDMetadataDict_deleteProperty
        self.SDMetadataDict_deleteProperty.restype = ctypes.c_int
        self.SDMetadataDict_deleteProperty.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
        self.mTypeMap['SDMetadataDict'] = SDMetadataDict
        from .sdpackagedependency import SDPackageDependency
        self.SDPackageDependency_getFilePath = self.mDllHandle.SDPackageDependency_getFilePath
        self.SDPackageDependency_getFilePath.restype = ctypes.c_int
        self.SDPackageDependency_getFilePath.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.SDPackageDependency_getPackage = self.mDllHandle.SDPackageDependency_getPackage
        self.SDPackageDependency_getPackage.restype = ctypes.c_int
        self.SDPackageDependency_getPackage.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDPackageDependency'] = SDPackageDependency
        from .sdpackage import SDPackage
        self.SDPackage_getFilePath = self.mDllHandle.SDPackage_getFilePath
        self.SDPackage_getFilePath.restype = ctypes.c_int
        self.SDPackage_getFilePath.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.SDPackage_findResourceFromUrl = self.mDllHandle.SDPackage_findResourceFromUrl
        self.SDPackage_findResourceFromUrl.restype = ctypes.c_int
        self.SDPackage_findResourceFromUrl.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDPackage_getChildrenResources = self.mDllHandle.SDPackage_getChildrenResources
        self.SDPackage_getChildrenResources.restype = ctypes.c_int
        self.SDPackage_getChildrenResources.argtypes = [ctypes.c_void_p, ctypes.c_bool, ctypes.POINTER(ctypes.c_void_p)]
        self.SDPackage_getMetadataDict = self.mDllHandle.SDPackage_getMetadataDict
        self.SDPackage_getMetadataDict.restype = ctypes.c_int
        self.SDPackage_getMetadataDict.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDPackage_getDependencies = self.mDllHandle.SDPackage_getDependencies
        self.SDPackage_getDependencies.restype = ctypes.c_int
        self.SDPackage_getDependencies.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDPackage'] = SDPackage
        from .sddefinition import SDDefinition
        self.SDDefinition_getId = self.mDllHandle.SDDefinition_getId
        self.SDDefinition_getId.restype = ctypes.c_int
        self.SDDefinition_getId.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.SDDefinition_getLabel = self.mDllHandle.SDDefinition_getLabel
        self.SDDefinition_getLabel.restype = ctypes.c_int
        self.SDDefinition_getLabel.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.SDDefinition_getDescription = self.mDllHandle.SDDefinition_getDescription
        self.SDDefinition_getDescription.restype = ctypes.c_int
        self.SDDefinition_getDescription.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.SDDefinition_getProperties = self.mDllHandle.SDDefinition_getProperties
        self.SDDefinition_getProperties.restype = ctypes.c_int
        self.SDDefinition_getProperties.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.POINTER(ctypes.c_void_p)]
        self.SDDefinition_getPropertyFromId = self.mDllHandle.SDDefinition_getPropertyFromId
        self.SDDefinition_getPropertyFromId.restype = ctypes.c_int
        self.SDDefinition_getPropertyFromId.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_int, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDDefinition'] = SDDefinition
        from .sdmodule import SDModule
        self.SDModule_getId = self.mDllHandle.SDModule_getId
        self.SDModule_getId.restype = ctypes.c_int
        self.SDModule_getId.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.SDModule_getDefinitions = self.mDllHandle.SDModule_getDefinitions
        self.SDModule_getDefinitions.restype = ctypes.c_int
        self.SDModule_getDefinitions.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDModule_getDefinitionFromId = self.mDllHandle.SDModule_getDefinitionFromId
        self.SDModule_getDefinitionFromId.restype = ctypes.c_int
        self.SDModule_getDefinitionFromId.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDModule_getTypes = self.mDllHandle.SDModule_getTypes
        self.SDModule_getTypes.restype = ctypes.c_int
        self.SDModule_getTypes.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDModule_getTypeFromId = self.mDllHandle.SDModule_getTypeFromId
        self.SDModule_getTypeFromId.restype = ctypes.c_int
        self.SDModule_getTypeFromId.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDModule'] = SDModule
        from .mdl.sdmdlmodule import SDMDLModule
        self.mTypeMap['SDMDLModule'] = SDMDLModule
        from .sdmodulemgr import SDModuleMgr
        self.SDModuleMgr_getModules = self.mDllHandle.SDModuleMgr_getModules
        self.SDModuleMgr_getModules.restype = ctypes.c_int
        self.SDModuleMgr_getModules.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDModuleMgr_getModuleFromId = self.mDllHandle.SDModuleMgr_getModuleFromId
        self.SDModuleMgr_getModuleFromId.restype = ctypes.c_int
        self.SDModuleMgr_getModuleFromId.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDModuleMgr_addRootPath = self.mDllHandle.SDModuleMgr_addRootPath
        self.SDModuleMgr_addRootPath.restype = ctypes.c_int
        self.SDModuleMgr_addRootPath.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_char_p]
        self.SDModuleMgr_removeRootPath = self.mDllHandle.SDModuleMgr_removeRootPath
        self.SDModuleMgr_removeRootPath.restype = ctypes.c_int
        self.SDModuleMgr_removeRootPath.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_char_p]
        self.SDModuleMgr_getRootPaths = self.mDllHandle.SDModuleMgr_getRootPaths
        self.SDModuleMgr_getRootPaths.restype = ctypes.c_int
        self.SDModuleMgr_getRootPaths.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDModuleMgr'] = SDModuleMgr
        from .sdgraph import SDGraph
        self.SDGraph_getNodeDefinitions = self.mDllHandle.SDGraph_getNodeDefinitions
        self.SDGraph_getNodeDefinitions.restype = ctypes.c_int
        self.SDGraph_getNodeDefinitions.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDGraph_newNode = self.mDllHandle.SDGraph_newNode
        self.SDGraph_newNode.restype = ctypes.c_int
        self.SDGraph_newNode.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDGraph_newInstanceNode = self.mDllHandle.SDGraph_newInstanceNode
        self.SDGraph_newInstanceNode.restype = ctypes.c_int
        self.SDGraph_newInstanceNode.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDGraph_deleteNode = self.mDllHandle.SDGraph_deleteNode
        self.SDGraph_deleteNode.restype = ctypes.c_int
        self.SDGraph_deleteNode.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
        self.SDGraph_getNodes = self.mDllHandle.SDGraph_getNodes
        self.SDGraph_getNodes.restype = ctypes.c_int
        self.SDGraph_getNodes.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDGraph_getNodeFromId = self.mDllHandle.SDGraph_getNodeFromId
        self.SDGraph_getNodeFromId.restype = ctypes.c_int
        self.SDGraph_getNodeFromId.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDGraph_getOutputNodes = self.mDllHandle.SDGraph_getOutputNodes
        self.SDGraph_getOutputNodes.restype = ctypes.c_int
        self.SDGraph_getOutputNodes.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDGraph_setOutputNode = self.mDllHandle.SDGraph_setOutputNode
        self.SDGraph_setOutputNode.restype = ctypes.c_int
        self.SDGraph_setOutputNode.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_bool]
        self.SDGraph_getGraphObjects = self.mDllHandle.SDGraph_getGraphObjects
        self.SDGraph_getGraphObjects.restype = ctypes.c_int
        self.SDGraph_getGraphObjects.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDGraph'] = SDGraph
        from .sbs.sdsbscompgraph import SDSBSCompGraph
        self.SDSBSCompGraph_sNew = self.mDllHandle.SDSBSCompGraph_sNew
        self.SDSBSCompGraph_sNew.restype = ctypes.c_int
        self.SDSBSCompGraph_sNew.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDSBSCompGraph_compute = self.mDllHandle.SDSBSCompGraph_compute
        self.SDSBSCompGraph_compute.restype = ctypes.c_int
        self.SDSBSCompGraph_compute.argtypes = [ctypes.c_void_p]
        self.SDSBSCompGraph_getPropertyInheritanceMethod = self.mDllHandle.SDSBSCompGraph_getPropertyInheritanceMethod
        self.SDSBSCompGraph_getPropertyInheritanceMethod.restype = ctypes.c_int
        self.SDSBSCompGraph_getPropertyInheritanceMethod.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)]
        self.SDSBSCompGraph_setPropertyInheritanceMethod = self.mDllHandle.SDSBSCompGraph_setPropertyInheritanceMethod
        self.SDSBSCompGraph_setPropertyInheritanceMethod.restype = ctypes.c_int
        self.SDSBSCompGraph_setPropertyInheritanceMethod.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_int]
        self.SDSBSCompGraph_setIcon = self.mDllHandle.SDSBSCompGraph_setIcon
        self.SDSBSCompGraph_setIcon.restype = ctypes.c_int
        self.SDSBSCompGraph_setIcon.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
        self.mTypeMap['SDSBSCompGraph'] = SDSBSCompGraph
        from .sbs.sdsbsfunctiongraph import SDSBSFunctionGraph
        self.SDSBSFunctionGraph_sNew = self.mDllHandle.SDSBSFunctionGraph_sNew
        self.SDSBSFunctionGraph_sNew.restype = ctypes.c_int
        self.SDSBSFunctionGraph_sNew.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDSBSFunctionGraph'] = SDSBSFunctionGraph
        from .sbs.sdsbsfxmapgraph import SDSBSFxMapGraph
        self.mTypeMap['SDSBSFxMapGraph'] = SDSBSFxMapGraph
        from .mdl.sdmdlgraph import SDMDLGraph
        self.SDMDLGraph_sNew = self.mDllHandle.SDMDLGraph_sNew
        self.SDMDLGraph_sNew.restype = ctypes.c_int
        self.SDMDLGraph_sNew.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDMDLGraph'] = SDMDLGraph
        from .sdnode import SDNode
        self.SDNode_getDefinition = self.mDllHandle.SDNode_getDefinition
        self.SDNode_getDefinition.restype = ctypes.c_int
        self.SDNode_getDefinition.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDNode_getPosition = self.mDllHandle.SDNode_getPosition
        self.SDNode_getPosition.restype = ctypes.c_int
        self.SDNode_getPosition.argtypes = [ctypes.c_void_p, ctypes.POINTER(float2)]
        self.SDNode_setPosition = self.mDllHandle.SDNode_setPosition
        self.SDNode_setPosition.restype = ctypes.c_int
        self.SDNode_setPosition.argtypes = [ctypes.c_void_p, ctypes.POINTER(float2)]
        self.SDNode_getProperties = self.mDllHandle.SDNode_getProperties
        self.SDNode_getProperties.restype = ctypes.c_int
        self.SDNode_getProperties.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.POINTER(ctypes.c_void_p)]
        self.SDNode_getPropertyFromId = self.mDllHandle.SDNode_getPropertyFromId
        self.SDNode_getPropertyFromId.restype = ctypes.c_int
        self.SDNode_getPropertyFromId.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_int, ctypes.POINTER(ctypes.c_void_p)]
        self.SDNode_getPropertyValue = self.mDllHandle.SDNode_getPropertyValue
        self.SDNode_getPropertyValue.restype = ctypes.c_int
        self.SDNode_getPropertyValue.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDNode_setPropertyValue = self.mDllHandle.SDNode_setPropertyValue
        self.SDNode_setPropertyValue.restype = ctypes.c_int
        self.SDNode_setPropertyValue.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]
        self.SDNode_setInputPropertyValueFromId = self.mDllHandle.SDNode_setInputPropertyValueFromId
        self.SDNode_setInputPropertyValueFromId.restype = ctypes.c_int
        self.SDNode_setInputPropertyValueFromId.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_void_p]
        self.SDNode_setAnnotationPropertyValueFromId = self.mDllHandle.SDNode_setAnnotationPropertyValueFromId
        self.SDNode_setAnnotationPropertyValueFromId.restype = ctypes.c_int
        self.SDNode_setAnnotationPropertyValueFromId.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_void_p]
        self.SDNode_getPropertyValueFromId = self.mDllHandle.SDNode_getPropertyValueFromId
        self.SDNode_getPropertyValueFromId.restype = ctypes.c_int
        self.SDNode_getPropertyValueFromId.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_int, ctypes.POINTER(ctypes.c_void_p)]
        self.SDNode_getInputPropertyValueFromId = self.mDllHandle.SDNode_getInputPropertyValueFromId
        self.SDNode_getInputPropertyValueFromId.restype = ctypes.c_int
        self.SDNode_getInputPropertyValueFromId.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDNode_getAnnotationPropertyValueFromId = self.mDllHandle.SDNode_getAnnotationPropertyValueFromId
        self.SDNode_getAnnotationPropertyValueFromId.restype = ctypes.c_int
        self.SDNode_getAnnotationPropertyValueFromId.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDNode_newPropertyConnection = self.mDllHandle.SDNode_newPropertyConnection
        self.SDNode_newPropertyConnection.restype = ctypes.c_int
        self.SDNode_newPropertyConnection.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDNode_newPropertyConnectionFromId = self.mDllHandle.SDNode_newPropertyConnectionFromId
        self.SDNode_newPropertyConnectionFromId.restype = ctypes.c_int
        self.SDNode_newPropertyConnectionFromId.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDNode_deletePropertyConnections = self.mDllHandle.SDNode_deletePropertyConnections
        self.SDNode_deletePropertyConnections.restype = ctypes.c_int
        self.SDNode_deletePropertyConnections.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
        self.SDNode_getPropertyConnections = self.mDllHandle.SDNode_getPropertyConnections
        self.SDNode_getPropertyConnections.restype = ctypes.c_int
        self.SDNode_getPropertyConnections.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDNode_getReferencedResource = self.mDllHandle.SDNode_getReferencedResource
        self.SDNode_getReferencedResource.restype = ctypes.c_int
        self.SDNode_getReferencedResource.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDNode_getPropertyGraph = self.mDllHandle.SDNode_getPropertyGraph
        self.SDNode_getPropertyGraph.restype = ctypes.c_int
        self.SDNode_getPropertyGraph.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDNode_newPropertyGraph = self.mDllHandle.SDNode_newPropertyGraph
        self.SDNode_newPropertyGraph.restype = ctypes.c_int
        self.SDNode_newPropertyGraph.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDNode_deletePropertyGraph = self.mDllHandle.SDNode_deletePropertyGraph
        self.SDNode_deletePropertyGraph.restype = ctypes.c_int
        self.SDNode_deletePropertyGraph.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
        self.SDNode_getIdentifier = self.mDllHandle.SDNode_getIdentifier
        self.SDNode_getIdentifier.restype = ctypes.c_int
        self.SDNode_getIdentifier.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.SDNode_newProperty = self.mDllHandle.SDNode_newProperty
        self.SDNode_newProperty.restype = ctypes.c_int
        self.SDNode_newProperty.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_void_p, ctypes.c_int, ctypes.POINTER(ctypes.c_void_p)]
        self.SDNode_deleteProperty = self.mDllHandle.SDNode_deleteProperty
        self.SDNode_deleteProperty.restype = ctypes.c_int
        self.SDNode_deleteProperty.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
        self.mTypeMap['SDNode'] = SDNode
        from .sbs.sdsbscompnode import SDSBSCompNode
        self.SDSBSCompNode_getPropertyInheritanceMethod = self.mDllHandle.SDSBSCompNode_getPropertyInheritanceMethod
        self.SDSBSCompNode_getPropertyInheritanceMethod.restype = ctypes.c_int
        self.SDSBSCompNode_getPropertyInheritanceMethod.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)]
        self.SDSBSCompNode_getInputPropertyInheritanceMethodFromId = self.mDllHandle.SDSBSCompNode_getInputPropertyInheritanceMethodFromId
        self.SDSBSCompNode_getInputPropertyInheritanceMethodFromId.restype = ctypes.c_int
        self.SDSBSCompNode_getInputPropertyInheritanceMethodFromId.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_int)]
        self.SDSBSCompNode_setPropertyInheritanceMethod = self.mDllHandle.SDSBSCompNode_setPropertyInheritanceMethod
        self.SDSBSCompNode_setPropertyInheritanceMethod.restype = ctypes.c_int
        self.SDSBSCompNode_setPropertyInheritanceMethod.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_int]
        self.SDSBSCompNode_setInputPropertyInheritanceMethodFromId = self.mDllHandle.SDSBSCompNode_setInputPropertyInheritanceMethodFromId
        self.SDSBSCompNode_setInputPropertyInheritanceMethodFromId.restype = ctypes.c_int
        self.SDSBSCompNode_setInputPropertyInheritanceMethodFromId.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_int]
        self.mTypeMap['SDSBSCompNode'] = SDSBSCompNode
        from .sbs.sdsbsfunctionnode import SDSBSFunctionNode
        self.mTypeMap['SDSBSFunctionNode'] = SDSBSFunctionNode
        from .sbs.sdsbsfxmapnode import SDSBSFxMapNode
        self.mTypeMap['SDSBSFxMapNode'] = SDSBSFxMapNode
        from .mdl.sdmdlnode import SDMDLNode
        self.mTypeMap['SDMDLNode'] = SDMDLNode
        from .mdl.sdmdlconstantnode import SDMDLConstantNode
        self.SDMDLConstantNode_setExposed = self.mDllHandle.SDMDLConstantNode_setExposed
        self.SDMDLConstantNode_setExposed.restype = ctypes.c_int
        self.SDMDLConstantNode_setExposed.argtypes = [ctypes.c_void_p, ctypes.c_bool]
        self.SDMDLConstantNode_isExposed = self.mDllHandle.SDMDLConstantNode_isExposed
        self.SDMDLConstantNode_isExposed.restype = ctypes.c_int
        self.SDMDLConstantNode_isExposed.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_bool)]
        self.mTypeMap['SDMDLConstantNode'] = SDMDLConstantNode
        from .sdapplication import SDApplication
        from .sdapplication import SDApplicationPath
        self.SDApplication_registerPythonClass = self.mDllHandle.SDApplication_registerPythonClass
        self.SDApplication_registerPythonClass.restype = ctypes.c_int
        self.SDApplication_registerPythonClass.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p]
        self.SDApplication_unregisterAllPythonClasses = self.mDllHandle.SDApplication_unregisterAllPythonClasses
        self.SDApplication_unregisterAllPythonClasses.restype = ctypes.c_int
        self.SDApplication_unregisterAllPythonClasses.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_char_p]
        self.SDApplication_getPackageMgr = self.mDllHandle.SDApplication_getPackageMgr
        self.SDApplication_getPackageMgr.restype = ctypes.c_int
        self.SDApplication_getPackageMgr.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDApplication_getModuleMgr = self.mDllHandle.SDApplication_getModuleMgr
        self.SDApplication_getModuleMgr.restype = ctypes.c_int
        self.SDApplication_getModuleMgr.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDApplication_getSDGraphDefinitionMgr = self.mDllHandle.SDApplication_getSDGraphDefinitionMgr
        self.SDApplication_getSDGraphDefinitionMgr.restype = ctypes.c_int
        self.SDApplication_getSDGraphDefinitionMgr.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDApplication_getPath = self.mDllHandle.SDApplication_getPath
        self.SDApplication_getPath.restype = ctypes.c_int
        self.SDApplication_getPath.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.POINTER(ctypes.c_char_p)]
        self.SDApplication_getUIMgr = self.mDllHandle.SDApplication_getUIMgr
        self.SDApplication_getUIMgr.restype = ctypes.c_int
        self.SDApplication_getUIMgr.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDApplication_getPluginMgr = self.mDllHandle.SDApplication_getPluginMgr
        self.SDApplication_getPluginMgr.restype = ctypes.c_int
        self.SDApplication_getPluginMgr.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDApplication_getColorManagementEngine = self.mDllHandle.SDApplication_getColorManagementEngine
        self.SDApplication_getColorManagementEngine.restype = ctypes.c_int
        self.SDApplication_getColorManagementEngine.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDApplication'] = SDApplication
        from .sdconnection import SDConnection
        self.SDConnection_getOutputProperty = self.mDllHandle.SDConnection_getOutputProperty
        self.SDConnection_getOutputProperty.restype = ctypes.c_int
        self.SDConnection_getOutputProperty.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDConnection_getOutputPropertyNode = self.mDllHandle.SDConnection_getOutputPropertyNode
        self.SDConnection_getOutputPropertyNode.restype = ctypes.c_int
        self.SDConnection_getOutputPropertyNode.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDConnection_getInputProperty = self.mDllHandle.SDConnection_getInputProperty
        self.SDConnection_getInputProperty.restype = ctypes.c_int
        self.SDConnection_getInputProperty.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDConnection_getInputPropertyNode = self.mDllHandle.SDConnection_getInputPropertyNode
        self.SDConnection_getInputPropertyNode.restype = ctypes.c_int
        self.SDConnection_getInputPropertyNode.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDConnection_disconnect = self.mDllHandle.SDConnection_disconnect
        self.SDConnection_disconnect.restype = ctypes.c_int
        self.SDConnection_disconnect.argtypes = [ctypes.c_void_p]
        self.mTypeMap['SDConnection'] = SDConnection
        from .sdproperty import SDProperty
        from .sdproperty import SDPropertyCategory
        from .sdproperty import SDPropertyInheritanceMethod
        self.SDProperty_getId = self.mDllHandle.SDProperty_getId
        self.SDProperty_getId.restype = ctypes.c_int
        self.SDProperty_getId.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.SDProperty_getTypes = self.mDllHandle.SDProperty_getTypes
        self.SDProperty_getTypes.restype = ctypes.c_int
        self.SDProperty_getTypes.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDProperty_getType = self.mDllHandle.SDProperty_getType
        self.SDProperty_getType.restype = ctypes.c_int
        self.SDProperty_getType.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDProperty_getDefaultValue = self.mDllHandle.SDProperty_getDefaultValue
        self.SDProperty_getDefaultValue.restype = ctypes.c_int
        self.SDProperty_getDefaultValue.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDProperty_getLabel = self.mDllHandle.SDProperty_getLabel
        self.SDProperty_getLabel.restype = ctypes.c_int
        self.SDProperty_getLabel.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.SDProperty_getDescription = self.mDllHandle.SDProperty_getDescription
        self.SDProperty_getDescription.restype = ctypes.c_int
        self.SDProperty_getDescription.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.SDProperty_getCategory = self.mDllHandle.SDProperty_getCategory
        self.SDProperty_getCategory.restype = ctypes.c_int
        self.SDProperty_getCategory.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)]
        self.SDProperty_isConnectable = self.mDllHandle.SDProperty_isConnectable
        self.SDProperty_isConnectable.restype = ctypes.c_int
        self.SDProperty_isConnectable.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_bool)]
        self.SDProperty_isReadOnly = self.mDllHandle.SDProperty_isReadOnly
        self.SDProperty_isReadOnly.restype = ctypes.c_int
        self.SDProperty_isReadOnly.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_bool)]
        self.SDProperty_isVariadic = self.mDllHandle.SDProperty_isVariadic
        self.SDProperty_isVariadic.restype = ctypes.c_int
        self.SDProperty_isVariadic.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_bool)]
        self.SDProperty_isPrimary = self.mDllHandle.SDProperty_isPrimary
        self.SDProperty_isPrimary.restype = ctypes.c_int
        self.SDProperty_isPrimary.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_bool)]
        self.SDProperty_isFunctionOnly = self.mDllHandle.SDProperty_isFunctionOnly
        self.SDProperty_isFunctionOnly.restype = ctypes.c_int
        self.SDProperty_isFunctionOnly.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_bool)]
        self.mTypeMap['SDProperty'] = SDProperty
        from .sdusage import SDUsage
        self.SDUsage_getName = self.mDllHandle.SDUsage_getName
        self.SDUsage_getName.restype = ctypes.c_int
        self.SDUsage_getName.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.SDUsage_getComponents = self.mDllHandle.SDUsage_getComponents
        self.SDUsage_getComponents.restype = ctypes.c_int
        self.SDUsage_getComponents.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.SDUsage_getColorSpace = self.mDllHandle.SDUsage_getColorSpace
        self.SDUsage_getColorSpace.restype = ctypes.c_int
        self.SDUsage_getColorSpace.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.SDUsage_sNew = self.mDllHandle.SDUsage_sNew
        self.SDUsage_sNew.restype = ctypes.c_int
        self.SDUsage_sNew.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDUsage'] = SDUsage
        from .mdl.sdmdlexporter import SDMDLExporter
        self.SDMDLExporter_sExportPackage = self.mDllHandle.SDMDLExporter_sExportPackage
        self.SDMDLExporter_sExportPackage.restype = ctypes.c_int
        self.SDMDLExporter_sExportPackage.argtypes = [ctypes.c_void_p, ctypes.c_char_p]
        self.SDMDLExporter_sExportPreset = self.mDllHandle.SDMDLExporter_sExportPreset
        self.SDMDLExporter_sExportPreset.restype = ctypes.c_int
        self.SDMDLExporter_sExportPreset.argtypes = [ctypes.c_void_p, ctypes.c_char_p]
        self.mTypeMap['SDMDLExporter'] = SDMDLExporter
        from .mdl.sdmdleexporter import SDMDLEExporter
        self.SDMDLEExporter_sExportGraph = self.mDllHandle.SDMDLEExporter_sExportGraph
        self.SDMDLEExporter_sExportGraph.restype = ctypes.c_int
        self.SDMDLEExporter_sExportGraph.argtypes = [ctypes.c_void_p, ctypes.c_char_p]
        self.mTypeMap['SDMDLEExporter'] = SDMDLEExporter
        from .sbs.sdsbsarexporter import SDSBSARExporter
        from .sbs.sdsbsarexporter import SDCompressionMode
        self.SDSBSARExporter_sNew = self.mDllHandle.SDSBSARExporter_sNew
        self.SDSBSARExporter_sNew.restype = ctypes.c_int
        self.SDSBSARExporter_sNew.argtypes = [ctypes.POINTER(ctypes.c_void_p)]
        self.SDSBSARExporter_setIconEnabled = self.mDllHandle.SDSBSARExporter_setIconEnabled
        self.SDSBSARExporter_setIconEnabled.restype = ctypes.c_int
        self.SDSBSARExporter_setIconEnabled.argtypes = [ctypes.c_void_p, ctypes.c_bool]
        self.SDSBSARExporter_setExposeOutputSize = self.mDllHandle.SDSBSARExporter_setExposeOutputSize
        self.SDSBSARExporter_setExposeOutputSize.restype = ctypes.c_int
        self.SDSBSARExporter_setExposeOutputSize.argtypes = [ctypes.c_void_p, ctypes.c_bool]
        self.SDSBSARExporter_setExposePixelSize = self.mDllHandle.SDSBSARExporter_setExposePixelSize
        self.SDSBSARExporter_setExposePixelSize.restype = ctypes.c_int
        self.SDSBSARExporter_setExposePixelSize.argtypes = [ctypes.c_void_p, ctypes.c_bool]
        self.SDSBSARExporter_setExposeRandomSeed = self.mDllHandle.SDSBSARExporter_setExposeRandomSeed
        self.SDSBSARExporter_setExposeRandomSeed.restype = ctypes.c_int
        self.SDSBSARExporter_setExposeRandomSeed.argtypes = [ctypes.c_void_p, ctypes.c_bool]
        self.SDSBSARExporter_setCompressionMode = self.mDllHandle.SDSBSARExporter_setCompressionMode
        self.SDSBSARExporter_setCompressionMode.restype = ctypes.c_int
        self.SDSBSARExporter_setCompressionMode.argtypes = [ctypes.c_void_p, ctypes.c_int]
        self.SDSBSARExporter_exportPackageToSBSAR = self.mDllHandle.SDSBSARExporter_exportPackageToSBSAR
        self.SDSBSARExporter_exportPackageToSBSAR.restype = ctypes.c_int
        self.SDSBSARExporter_exportPackageToSBSAR.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_char_p]
        self.mTypeMap['SDSBSARExporter'] = SDSBSARExporter
        from .sdgraphobject import SDGraphObject
        self.SDGraphObject_getPosition = self.mDllHandle.SDGraphObject_getPosition
        self.SDGraphObject_getPosition.restype = ctypes.c_int
        self.SDGraphObject_getPosition.argtypes = [ctypes.c_void_p, ctypes.POINTER(float2)]
        self.SDGraphObject_setPosition = self.mDllHandle.SDGraphObject_setPosition
        self.SDGraphObject_setPosition.restype = ctypes.c_int
        self.SDGraphObject_setPosition.argtypes = [ctypes.c_void_p, ctypes.POINTER(float2)]
        self.SDGraphObject_getDescription = self.mDllHandle.SDGraphObject_getDescription
        self.SDGraphObject_getDescription.restype = ctypes.c_int
        self.SDGraphObject_getDescription.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.SDGraphObject_setDescription = self.mDllHandle.SDGraphObject_setDescription
        self.SDGraphObject_setDescription.restype = ctypes.c_int
        self.SDGraphObject_setDescription.argtypes = [ctypes.c_void_p, ctypes.c_char_p]
        self.mTypeMap['SDGraphObject'] = SDGraphObject
        from .sdgraphobjectpin import SDGraphObjectPin
        self.SDGraphObjectPin_sNew = self.mDllHandle.SDGraphObjectPin_sNew
        self.SDGraphObjectPin_sNew.restype = ctypes.c_int
        self.SDGraphObjectPin_sNew.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDGraphObjectPin'] = SDGraphObjectPin
        from .sdgraphobjectcomment import SDGraphObjectComment
        self.SDGraphObjectComment_sNew = self.mDllHandle.SDGraphObjectComment_sNew
        self.SDGraphObjectComment_sNew.restype = ctypes.c_int
        self.SDGraphObjectComment_sNew.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDGraphObjectComment_sNewAsChild = self.mDllHandle.SDGraphObjectComment_sNewAsChild
        self.SDGraphObjectComment_sNewAsChild.restype = ctypes.c_int
        self.SDGraphObjectComment_sNewAsChild.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDGraphObjectComment_getParent = self.mDllHandle.SDGraphObjectComment_getParent
        self.SDGraphObjectComment_getParent.restype = ctypes.c_int
        self.SDGraphObjectComment_getParent.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDGraphObjectComment'] = SDGraphObjectComment
        from .sdgraphobjectframe import SDGraphObjectFrame
        self.SDGraphObjectFrame_sNew = self.mDllHandle.SDGraphObjectFrame_sNew
        self.SDGraphObjectFrame_sNew.restype = ctypes.c_int
        self.SDGraphObjectFrame_sNew.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDGraphObjectFrame_getTitle = self.mDllHandle.SDGraphObjectFrame_getTitle
        self.SDGraphObjectFrame_getTitle.restype = ctypes.c_int
        self.SDGraphObjectFrame_getTitle.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.SDGraphObjectFrame_setTitle = self.mDllHandle.SDGraphObjectFrame_setTitle
        self.SDGraphObjectFrame_setTitle.restype = ctypes.c_int
        self.SDGraphObjectFrame_setTitle.argtypes = [ctypes.c_void_p, ctypes.c_char_p]
        self.SDGraphObjectFrame_getColor = self.mDllHandle.SDGraphObjectFrame_getColor
        self.SDGraphObjectFrame_getColor.restype = ctypes.c_int
        self.SDGraphObjectFrame_getColor.argtypes = [ctypes.c_void_p, ctypes.POINTER(ColorRGBA)]
        self.SDGraphObjectFrame_setColor = self.mDllHandle.SDGraphObjectFrame_setColor
        self.SDGraphObjectFrame_setColor.restype = ctypes.c_int
        self.SDGraphObjectFrame_setColor.argtypes = [ctypes.c_void_p, ctypes.POINTER(ColorRGBA)]
        self.SDGraphObjectFrame_getSize = self.mDllHandle.SDGraphObjectFrame_getSize
        self.SDGraphObjectFrame_getSize.restype = ctypes.c_int
        self.SDGraphObjectFrame_getSize.argtypes = [ctypes.c_void_p, ctypes.POINTER(float2)]
        self.SDGraphObjectFrame_setSize = self.mDllHandle.SDGraphObjectFrame_setSize
        self.SDGraphObjectFrame_setSize.restype = ctypes.c_int
        self.SDGraphObjectFrame_setSize.argtypes = [ctypes.c_void_p, ctypes.POINTER(float2)]
        self.mTypeMap['SDGraphObjectFrame'] = SDGraphObjectFrame
        from .sduimgr import SDUIMgr
        self.SDUIMgr_getMainWindowPtr = self.mDllHandle.SDUIMgr_getMainWindowPtr
        self.SDUIMgr_getMainWindowPtr.restype = ctypes.c_int
        self.SDUIMgr_getMainWindowPtr.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_size_t)]
        self.SDUIMgr_newMenu = self.mDllHandle.SDUIMgr_newMenu
        self.SDUIMgr_newMenu.restype = ctypes.c_int
        self.SDUIMgr_newMenu.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_size_t)]
        self.SDUIMgr_findMenuFromObjectName = self.mDllHandle.SDUIMgr_findMenuFromObjectName
        self.SDUIMgr_findMenuFromObjectName.restype = ctypes.c_int
        self.SDUIMgr_findMenuFromObjectName.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_size_t)]
        self.SDUIMgr_deleteMenu = self.mDllHandle.SDUIMgr_deleteMenu
        self.SDUIMgr_deleteMenu.restype = ctypes.c_int
        self.SDUIMgr_deleteMenu.argtypes = [ctypes.c_void_p, ctypes.c_char_p]
        self.SDUIMgr_newDockWidget = self.mDllHandle.SDUIMgr_newDockWidget
        self.SDUIMgr_newDockWidget.restype = ctypes.c_int
        self.SDUIMgr_newDockWidget.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_size_t)]
        self.SDUIMgr_addToolbarToGraphView = self.mDllHandle.SDUIMgr_addToolbarToGraphView
        self.SDUIMgr_addToolbarToGraphView.restype = ctypes.c_int
        self.SDUIMgr_addToolbarToGraphView.argtypes = [ctypes.c_void_p, ctypes.c_size_t, ctypes.c_size_t, ctypes.c_size_t]
        self.SDUIMgr_getCurrentGraph = self.mDllHandle.SDUIMgr_getCurrentGraph
        self.SDUIMgr_getCurrentGraph.restype = ctypes.c_int
        self.SDUIMgr_getCurrentGraph.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDUIMgr_getCurrentGraphSelection = self.mDllHandle.SDUIMgr_getCurrentGraphSelection
        self.SDUIMgr_getCurrentGraphSelection.restype = ctypes.c_int
        self.SDUIMgr_getCurrentGraphSelection.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDUIMgr_getGraphFromGraphViewID = self.mDllHandle.SDUIMgr_getGraphFromGraphViewID
        self.SDUIMgr_getGraphFromGraphViewID.restype = ctypes.c_int
        self.SDUIMgr_getGraphFromGraphViewID.argtypes = [ctypes.c_void_p, ctypes.c_size_t, ctypes.POINTER(ctypes.c_void_p)]
        self.SDUIMgr_getCurrentGraphSelectionFromGraphViewID = self.mDllHandle.SDUIMgr_getCurrentGraphSelectionFromGraphViewID
        self.SDUIMgr_getCurrentGraphSelectionFromGraphViewID.restype = ctypes.c_int
        self.SDUIMgr_getCurrentGraphSelectionFromGraphViewID.argtypes = [ctypes.c_void_p, ctypes.c_size_t, ctypes.POINTER(ctypes.c_void_p)]
        self.SDUIMgr_addActionToExplorerToolbar = self.mDllHandle.SDUIMgr_addActionToExplorerToolbar
        self.SDUIMgr_addActionToExplorerToolbar.restype = ctypes.c_int
        self.SDUIMgr_addActionToExplorerToolbar.argtypes = [ctypes.c_void_p, ctypes.c_size_t, ctypes.c_size_t]
        self.SDUIMgr_getExplorerSelection = self.mDllHandle.SDUIMgr_getExplorerSelection
        self.SDUIMgr_getExplorerSelection.restype = ctypes.c_int
        self.SDUIMgr_getExplorerSelection.argtypes = [ctypes.c_void_p, ctypes.c_size_t, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDUIMgr'] = SDUIMgr
        from .sdhistoryutils import SDHistoryUtils
        self.SDHistoryUtils_newTransaction = self.mDllHandle.SDHistoryUtils_newTransaction
        self.SDHistoryUtils_newTransaction.restype = ctypes.c_int
        self.SDHistoryUtils_newTransaction.argtypes = [ctypes.c_char_p]
        self.SDHistoryUtils_commitTransaction = self.mDllHandle.SDHistoryUtils_commitTransaction
        self.SDHistoryUtils_commitTransaction.restype = ctypes.c_int
        self.SDHistoryUtils_commitTransaction.argtypes = []
        self.mTypeMap['SDHistoryUtils'] = SDHistoryUtils
        from .sdplugin import SDPlugin
        from .sdplugin import SDPluginStatus
        self.SDPlugin_getName = self.mDllHandle.SDPlugin_getName
        self.SDPlugin_getName.restype = ctypes.c_int
        self.SDPlugin_getName.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.SDPlugin_getDirectory = self.mDllHandle.SDPlugin_getDirectory
        self.SDPlugin_getDirectory.restype = ctypes.c_int
        self.SDPlugin_getDirectory.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.SDPlugin_getStatus = self.mDllHandle.SDPlugin_getStatus
        self.SDPlugin_getStatus.restype = ctypes.c_int
        self.SDPlugin_getStatus.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)]
        self.SDPlugin_getLastErrorMessage = self.mDllHandle.SDPlugin_getLastErrorMessage
        self.SDPlugin_getLastErrorMessage.restype = ctypes.c_int
        self.SDPlugin_getLastErrorMessage.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.mTypeMap['SDPlugin'] = SDPlugin
        from .sdpluginmgr import SDPluginMgr
        self.SDPluginMgr_getPlugins = self.mDllHandle.SDPluginMgr_getPlugins
        self.SDPluginMgr_getPlugins.restype = ctypes.c_int
        self.SDPluginMgr_getPlugins.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDPluginMgr_loadPlugin = self.mDllHandle.SDPluginMgr_loadPlugin
        self.SDPluginMgr_loadPlugin.restype = ctypes.c_int
        self.SDPluginMgr_loadPlugin.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDPluginMgr_unloadPlugin = self.mDllHandle.SDPluginMgr_unloadPlugin
        self.SDPluginMgr_unloadPlugin.restype = ctypes.c_int
        self.SDPluginMgr_unloadPlugin.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
        self.SDPluginMgr_getUserPluginsDir = self.mDllHandle.SDPluginMgr_getUserPluginsDir
        self.SDPluginMgr_getUserPluginsDir.restype = ctypes.c_int
        self.SDPluginMgr_getUserPluginsDir.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.SDPluginMgr_checkPluginCompatibility = self.mDllHandle.SDPluginMgr_checkPluginCompatibility
        self.SDPluginMgr_checkPluginCompatibility.restype = ctypes.c_int
        self.SDPluginMgr_checkPluginCompatibility.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_char_p)]
        self.mTypeMap['SDPluginMgr'] = SDPluginMgr
        from .sdgraphdefinition import SDGraphDefinition
        self.SDGraphDefinition_sNew = self.mDllHandle.SDGraphDefinition_sNew
        self.SDGraphDefinition_sNew.restype = ctypes.c_int
        self.SDGraphDefinition_sNew.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDGraphDefinition_getId = self.mDllHandle.SDGraphDefinition_getId
        self.SDGraphDefinition_getId.restype = ctypes.c_int
        self.SDGraphDefinition_getId.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.SDGraphDefinition_addDefinition = self.mDllHandle.SDGraphDefinition_addDefinition
        self.SDGraphDefinition_addDefinition.restype = ctypes.c_int
        self.SDGraphDefinition_addDefinition.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
        self.SDGraphDefinition_removeDefinition = self.mDllHandle.SDGraphDefinition_removeDefinition
        self.SDGraphDefinition_removeDefinition.restype = ctypes.c_int
        self.SDGraphDefinition_removeDefinition.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
        self.SDGraphDefinition_getDefinitionFromId = self.mDllHandle.SDGraphDefinition_getDefinitionFromId
        self.SDGraphDefinition_getDefinitionFromId.restype = ctypes.c_int
        self.SDGraphDefinition_getDefinitionFromId.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDGraphDefinition_addType = self.mDllHandle.SDGraphDefinition_addType
        self.SDGraphDefinition_addType.restype = ctypes.c_int
        self.SDGraphDefinition_addType.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
        self.SDGraphDefinition_setLabel = self.mDllHandle.SDGraphDefinition_setLabel
        self.SDGraphDefinition_setLabel.restype = ctypes.c_int
        self.SDGraphDefinition_setLabel.argtypes = [ctypes.c_void_p, ctypes.c_char_p]
        self.SDGraphDefinition_setIconFile = self.mDllHandle.SDGraphDefinition_setIconFile
        self.SDGraphDefinition_setIconFile.restype = ctypes.c_int
        self.SDGraphDefinition_setIconFile.argtypes = [ctypes.c_void_p, ctypes.c_char_p]
        self.mTypeMap['SDGraphDefinition'] = SDGraphDefinition
        from .mdl.sdmdlgraphdefinition import SDMDLGraphDefinition
        self.SDMDLGraphDefinition_sNew = self.mDllHandle.SDMDLGraphDefinition_sNew
        self.SDMDLGraphDefinition_sNew.restype = ctypes.c_int
        self.SDMDLGraphDefinition_sNew.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDMDLGraphDefinition'] = SDMDLGraphDefinition
        from .sdgraphdefinitionmgr import SDGraphDefinitionMgr
        self.SDGraphDefinitionMgr_getGraphDefinitions = self.mDllHandle.SDGraphDefinitionMgr_getGraphDefinitions
        self.SDGraphDefinitionMgr_getGraphDefinitions.restype = ctypes.c_int
        self.SDGraphDefinitionMgr_getGraphDefinitions.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDGraphDefinitionMgr_addGraphDefinition = self.mDllHandle.SDGraphDefinitionMgr_addGraphDefinition
        self.SDGraphDefinitionMgr_addGraphDefinition.restype = ctypes.c_int
        self.SDGraphDefinitionMgr_addGraphDefinition.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
        self.SDGraphDefinitionMgr_getGraphDefinitionFromId = self.mDllHandle.SDGraphDefinitionMgr_getGraphDefinitionFromId
        self.SDGraphDefinitionMgr_getGraphDefinitionFromId.restype = ctypes.c_int
        self.SDGraphDefinitionMgr_getGraphDefinitionFromId.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)]
        self.mTypeMap['SDGraphDefinitionMgr'] = SDGraphDefinitionMgr
        from .sdcolormanagementengine import SDColorManagementEngine
        self.SDColorManagementEngine_getName = self.mDllHandle.SDColorManagementEngine_getName
        self.SDColorManagementEngine_getName.restype = ctypes.c_int
        self.SDColorManagementEngine_getName.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.SDColorManagementEngine_getWorkingColorSpaceName = self.mDllHandle.SDColorManagementEngine_getWorkingColorSpaceName
        self.SDColorManagementEngine_getWorkingColorSpaceName.restype = ctypes.c_int
        self.SDColorManagementEngine_getWorkingColorSpaceName.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.SDColorManagementEngine_getRawColorSpaceName = self.mDllHandle.SDColorManagementEngine_getRawColorSpaceName
        self.SDColorManagementEngine_getRawColorSpaceName.restype = ctypes.c_int
        self.SDColorManagementEngine_getRawColorSpaceName.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.SDColorManagementEngine_getColorSpaces = self.mDllHandle.SDColorManagementEngine_getColorSpaces
        self.SDColorManagementEngine_getColorSpaces.restype = ctypes.c_int
        self.SDColorManagementEngine_getColorSpaces.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
        self.SDColorManagementEngine_getOCIOConfigFileName = self.mDllHandle.SDColorManagementEngine_getOCIOConfigFileName
        self.SDColorManagementEngine_getOCIOConfigFileName.restype = ctypes.c_int
        self.SDColorManagementEngine_getOCIOConfigFileName.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)]
        self.mTypeMap['SDColorManagementEngine'] = SDColorManagementEngine
