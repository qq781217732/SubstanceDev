# ADOBE CONFIDENTIAL
#
# Copyright 2020 Adobe
# All Rights Reserved.
#
# NOTICE:  Adobe permits you to use, modify, and distribute this file in
# accordance with the terms of the Adobe license agreement accompanying it.
# If you have received this file from a source other than Adobe,
# then your use, modification, or distribution of it requires the prior
# written permission of Adobe.
#
# Autogenerated by ipa. Don't edit directly, edit the definitions and regenerate it when changing
#

import ctypes
import base64
from .sdarray import SDArray
from .sdplugin import SDPlugin
from .sdapiobject import SDAPIObject
from .sdplugin import SDPluginStatus
from .sdapiobject import SDApiError
from .apiexception import APIException

class SDPluginMgr(SDAPIObject):
    """
    Manages plugins. There is only one SDPluginMgr, that you can retrieve from the SDApplication
    """
    def __init__(self, APIContext, handle, *args, **kwargs):
        """
        Constructor

        :rtype: SDPluginMgr
        """
        SDAPIObject.__init__(self, APIContext, handle, *args, **kwargs)

    def getPlugins(self):
        """
        Get the available plugins

        :rtype: SDArray[SDPlugin]
        """
        outPlugins = ctypes.c_void_p()
        _res = self.mAPIContext.SDPluginMgr_getPlugins(self.mHandle, ctypes.byref(outPlugins))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outPlugins, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outPlugins.value, ownHandle=True)

    def loadPlugin(self, inPluginName, inPluginDir):
        """
        Load a plugin

        :param inPluginName: The plugin name
        :type inPluginName: string
        :param inPluginDir: The directory where the plugin is located
        :type inPluginDir: string
        :rtype: SDPlugin
        """
        outSDPlugin = ctypes.c_void_p()
        _res = self.mAPIContext.SDPluginMgr_loadPlugin(self.mHandle, ctypes.create_string_buffer(inPluginName.encode('utf-8')), ctypes.create_string_buffer(inPluginDir.encode('utf-8')), ctypes.byref(outSDPlugin))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outSDPlugin, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outSDPlugin.value, ownHandle=True)

    def unloadPlugin(self, inPlugin):
        """
        Unload a plugin

        :param inPlugin: The plugin to unload
        :type inPlugin: SDPlugin
        :rtype: None
        """
        _res = self.mAPIContext.SDPluginMgr_unloadPlugin(self.mHandle, inPlugin.mHandle)
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return None

    def getUserPluginsDir(self):
        """
        Get the user plugins directory

        :rtype: string
        """
        outPluginDir = ctypes.c_char_p()
        _res = self.mAPIContext.SDPluginMgr_getUserPluginsDir(self.mHandle, ctypes.byref(outPluginDir))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return outPluginDir.value.decode('utf-8')

    def checkPluginCompatibility(self, inMetadata):
        """
        Check if a plugin is compatible with this Designer version

        :param inMetadata: A string with JSON encoded plugin metadata
        :type inMetadata: string
        :rtype: string
        """
        outErrorMessage = ctypes.c_char_p()
        _res = self.mAPIContext.SDPluginMgr_checkPluginCompatibility(self.mHandle, ctypes.create_string_buffer(inMetadata.encode('utf-8')), ctypes.byref(outErrorMessage))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return outErrorMessage.value.decode('utf-8')

