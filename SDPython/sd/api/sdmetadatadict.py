# ADOBE CONFIDENTIAL
#
# Copyright 2020 Adobe
# All Rights Reserved.
#
# NOTICE:  Adobe permits you to use, modify, and distribute this file in
# accordance with the terms of the Adobe license agreement accompanying it.
# If you have received this file from a source other than Adobe,
# then your use, modification, or distribution of it requires the prior
# written permission of Adobe.
#
# Autogenerated by ipa. Don't edit directly, edit the definitions and regenerate it when changing
#

import ctypes
import base64
from .sdarray import *
from .sdproperty import *
from .sdvalue import *
from .sdresource import *
from .sdapiobject import *
from .sdproperty import *
from .sdproperty import *
from .sdresource import *
from .sdapiobject import *
from .apiexception import APIException

class SDMetadataDict(SDAPIObject):
    """
    Dictionary of SDProperties. These properties are to be interprepeted as key-value pairs.
    """
    def __init__(self, APIContext, handle, *args, **kwargs):
        """
        Constructor

        :rtype: SDMetadataDict
        """
        SDAPIObject.__init__(self, APIContext, handle, *args, **kwargs)

    def getProperties(self):
        """
        Get all properties of this SDMetadataDict.

        :rtype: SDArray[SDProperty]
        """
        outSDPropertyArray = ctypes.c_void_p()
        _res = self.mAPIContext.SDMetadataDict_getProperties(self.mHandle, ctypes.byref(outSDPropertyArray))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outSDPropertyArray, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outSDPropertyArray.value, ownHandle=True)

    def getPropertyFromId(self, sdPropertyId):
        """
        Get the property that matches the specified identifier.

        :param sdPropertyId: The identifier of the property we want to retrieve
        :type sdPropertyId: string
        :rtype: SDProperty
        """
        outSDProperty = ctypes.c_void_p()
        _res = self.mAPIContext.SDMetadataDict_getPropertyFromId(self.mHandle, ctypes.create_string_buffer(sdPropertyId.encode('utf-8')), ctypes.byref(outSDProperty))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outSDProperty, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outSDProperty.value, ownHandle=True)

    def getPropertyValue(self, sdProperty):
        """
        Get the value of the specified property.

        :param sdProperty: The property we want to retrieve the value from
        :type sdProperty: SDProperty
        :rtype: SDValue
        """
        outSDValue = ctypes.c_void_p()
        _res = self.mAPIContext.SDMetadataDict_getPropertyValue(self.mHandle, sdProperty.mHandle, ctypes.byref(outSDValue))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outSDValue, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outSDValue.value, ownHandle=True)

    def setPropertyValue(self, sdProperty, sdValue):
        """
        Set the value of the specified property.

        :param sdProperty: The property for which we want to set the value
        :type sdProperty: SDProperty
        :param sdValue: The value to set
        :type sdValue: SDValue
        :rtype: None
        """
        _res = self.mAPIContext.SDMetadataDict_setPropertyValue(self.mHandle, sdProperty.mHandle, sdValue.mHandle)
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return None

    def getPropertyValueFromId(self, sdPropertyId):
        """
        Get the value of the property that matches the specified identifier.

        :param sdPropertyId: The identifier of the property we want to retrieve
        :type sdPropertyId: string
        :rtype: SDValue
        """
        outSDValue = ctypes.c_void_p()
        _res = self.mAPIContext.SDMetadataDict_getPropertyValueFromId(self.mHandle, ctypes.create_string_buffer(sdPropertyId.encode('utf-8')), ctypes.byref(outSDValue))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outSDValue, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outSDValue.value, ownHandle=True)

    def setPropertyValueFromId(self, sdPropertyId, sdValue):
        """
        Set the value of the property that matches the specified identifier.. If the property doesn't exists, it is automatically created.

        :param sdPropertyId: The identifier of the property for which we want to set the value
        :type sdPropertyId: string
        :param sdValue: The value to set
        :type sdValue: SDValue
        :rtype: None
        """
        _res = self.mAPIContext.SDMetadataDict_setPropertyValueFromId(self.mHandle, ctypes.create_string_buffer(sdPropertyId.encode('utf-8')), sdValue.mHandle)
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return None

    def setPropertyURLFromResource(self, sdPropertyId, sdResource):
        """
        Set an URL pointing to the specified resource as value for the property that matches the specified identifier. If the property doesn't exists, it is automatically created.

        :param sdPropertyId: The identifier of the property for which we want to set the value
        :type sdPropertyId: string
        :param sdResource: The value to set
        :type sdResource: SDResource
        :rtype: None
        """
        _res = self.mAPIContext.SDMetadataDict_setPropertyURLFromResource(self.mHandle, ctypes.create_string_buffer(sdPropertyId.encode('utf-8')), sdResource.mHandle)
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return None

    def deleteProperty(self, sdProperty):
        """
        Delete the specified property

        :param sdProperty: The property to remove
        :type sdProperty: SDProperty
        :rtype: None
        """
        _res = self.mAPIContext.SDMetadataDict_deleteProperty(self.mHandle, sdProperty.mHandle)
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return None

