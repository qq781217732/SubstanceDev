# ADOBE CONFIDENTIAL
#
# Copyright 2020 Adobe
# All Rights Reserved.
#
# NOTICE:  Adobe permits you to use, modify, and distribute this file in
# accordance with the terms of the Adobe license agreement accompanying it.
# If you have received this file from a source other than Adobe,
# then your use, modification, or distribution of it requires the prior
# written permission of Adobe.
#
# Autogenerated by ipa. Don't edit directly, edit the definitions and regenerate it when changing
#

import ctypes
import base64
import sd
from .sdapiobject import SDAPIObject
from .sdresource import SDResource
from .sdbasetypes import int2
from .sdbasetypes import ColorRGBA
from .sdapiobject import SDApiError
from .sdresource import EmbedMethod
from .apiexception import APIException

class SDResourceBitmap(SDResource):
    """
    A bitmap resource as it can be found in a SDPackage
    """
    def __init__(self, APIContext, handle, *args, **kwargs):
        """
        Constructor

        :rtype: SDResourceBitmap
        """
        SDResource.__init__(self, APIContext, handle, *args, **kwargs)

    @staticmethod
    def sNew(parent, size, backgroundColor):
        """
        Create a new SDResourceBitmap under the specified parent. The bitmap content is filled with 'backgroundColor'

        :param parent: The parent data that will contains the newly created resource. Can be SDPackage or SDResourceFolder
        :type parent: SDAPIObject
        :param size: The size of the bitmap in pixel
        :type size: int2
        :param backgroundColor: The background color of the bitmap
        :type backgroundColor: ColorRGBA
        :rtype: SDResourceBitmap
        """
        outResource = ctypes.c_void_p()
        _res = sd.getContext().SDResourceBitmap_sNew(parent.mHandle, ctypes.byref(size), ctypes.byref(backgroundColor), ctypes.byref(outResource))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = sd.getContext().mTypeMap[SDAPIObject(sd.getContext(), outResource, ownHandle=False).getClassName()]
        return constructor(sd.getContext(), outResource.value, ownHandle=True)

    @staticmethod
    def sNewFromFile(parent, filePath, embedMethod):
        """
        Create a new SDResourceBitmap from the specified file. The resource may reference or copy the file content depending on the EmbedMethod

        :param parent: The parent data that will contains the newly created Resource. Can be SDPackage or SDResourceFolder
        :type parent: SDAPIObject
        :param filePath: The bitmap file path
        :type filePath: string
        :param embedMethod: The embed method
        :type embedMethod: EmbedMethod
        :rtype: SDResourceBitmap
        """
        outResource = ctypes.c_void_p()
        _res = sd.getContext().SDResourceBitmap_sNewFromFile(parent.mHandle, ctypes.create_string_buffer(filePath.encode('utf-8')), embedMethod.value, ctypes.byref(outResource))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = sd.getContext().mTypeMap[SDAPIObject(sd.getContext(), outResource, ownHandle=False).getClassName()]
        return constructor(sd.getContext(), outResource.value, ownHandle=True)

