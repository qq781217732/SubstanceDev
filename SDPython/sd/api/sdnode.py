# ADOBE CONFIDENTIAL
#
# Copyright 2020 Adobe
# All Rights Reserved.
#
# NOTICE:  Adobe permits you to use, modify, and distribute this file in
# accordance with the terms of the Adobe license agreement accompanying it.
# If you have received this file from a source other than Adobe,
# then your use, modification, or distribution of it requires the prior
# written permission of Adobe.
#
# Autogenerated by ipa. Don't edit directly, edit the definitions and regenerate it when changing
#

import ctypes
import base64
from .sddefinition import *
from .sdarray import *
from .sdproperty import *
from .sdvalue import *
from .sdconnection import *
from .sdresource import *
from .sdgraph import *
from .sdtype import *
from .sdapiobject import *
from .sdbasetypes import *
from .sdproperty import *
from .sdproperty import *
from .sdresource import *
from .sdtype import *
from .sdapiobject import *
from .apiexception import APIException

class SDNode(SDAPIObject):
    """
    Base class of all nodes (as elements of graphs)
    """
    def __init__(self, APIContext, handle, *args, **kwargs):
        """
        Constructor

        :rtype: SDNode
        """
        SDAPIObject.__init__(self, APIContext, handle, *args, **kwargs)

    def getDefinition(self):
        """
        Get the definition of the node

        :rtype: SDDefinition
        """
        outSDDefinition = ctypes.c_void_p()
        _res = self.mAPIContext.SDNode_getDefinition(self.mHandle, ctypes.byref(outSDDefinition))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outSDDefinition, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outSDDefinition.value, ownHandle=True)

    def getPosition(self):
        """
        Get the node position within its graph

        :rtype: float2
        """
        outPosition = float2()
        _res = self.mAPIContext.SDNode_getPosition(self.mHandle, ctypes.byref(outPosition))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return outPosition

    def setPosition(self, position):
        """
        Set the node position within its graph. Note that the X+ is oriented to the right and the Y+ axis is oriented to the bottom.

        :param position: The new node position in the graph
        :type position: float2
        :rtype: None
        """
        _res = self.mAPIContext.SDNode_setPosition(self.mHandle, ctypes.byref(position))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return None

    def getProperties(self, sdPropertyCategory):
        """
        Get all node properties for the specified SDPropertyCategory

        :param sdPropertyCategory: The category of the property
        :type sdPropertyCategory: SDPropertyCategory
        :rtype: SDArray[SDProperty]
        """
        outSDPropertyArray = ctypes.c_void_p()
        _res = self.mAPIContext.SDNode_getProperties(self.mHandle, sdPropertyCategory.value, ctypes.byref(outSDPropertyArray))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outSDPropertyArray, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outSDPropertyArray.value, ownHandle=True)

    def getPropertyFromId(self, sdPropertyId, sdPropertyCategory):
        """
        Get the property that matches the specified identifier in the specified category

        :param sdPropertyId: The identifier of the property we want to retrieve
        :type sdPropertyId: string
        :param sdPropertyCategory: The category of the property
        :type sdPropertyCategory: SDPropertyCategory
        :rtype: SDProperty
        """
        outSDProperty = ctypes.c_void_p()
        _res = self.mAPIContext.SDNode_getPropertyFromId(self.mHandle, ctypes.create_string_buffer(sdPropertyId.encode('utf-8')), sdPropertyCategory.value, ctypes.byref(outSDProperty))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outSDProperty, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outSDProperty.value, ownHandle=True)

    def getPropertyValue(self, sdProperty):
        """
        Get the value of the specified node property

        :param sdProperty: The property we want to retrieve the value from
        :type sdProperty: SDProperty
        :rtype: SDValue
        """
        outSDValue = ctypes.c_void_p()
        _res = self.mAPIContext.SDNode_getPropertyValue(self.mHandle, sdProperty.mHandle, ctypes.byref(outSDValue))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outSDValue, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outSDValue.value, ownHandle=True)

    def setPropertyValue(self, sdProperty, sdValue):
        """
        Set the value of the specified node property. Note that this operation is not allowed for sdProperty that  if the SDProperty.isFunctionOnly() method returns true

        :param sdProperty: The property we want to retrieve the value from
        :type sdProperty: SDProperty
        :param sdValue: The value to set
        :type sdValue: SDValue
        :rtype: None
        """
        _res = self.mAPIContext.SDNode_setPropertyValue(self.mHandle, sdProperty.mHandle, sdValue.mHandle)
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return None

    def setInputPropertyValueFromId(self, sdInputPropertyId, sdValue):
        """
        Set the value of the specified node input property retrieved by his identifier

        :param sdInputPropertyId: The identifier of the input property we want to set
        :type sdInputPropertyId: string
        :param sdValue: The value to set
        :type sdValue: SDValue
        :rtype: None
        """
        _res = self.mAPIContext.SDNode_setInputPropertyValueFromId(self.mHandle, ctypes.create_string_buffer(sdInputPropertyId.encode('utf-8')), sdValue.mHandle)
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return None

    def setAnnotationPropertyValueFromId(self, sdAnnotationPropertyId, sdValue):
        """
        Set the value of the specified node annotation property retrieved by his identifier

        :param sdAnnotationPropertyId: The identifier of the annotation property we want to set
        :type sdAnnotationPropertyId: string
        :param sdValue: The value to set
        :type sdValue: SDValue
        :rtype: None
        """
        _res = self.mAPIContext.SDNode_setAnnotationPropertyValueFromId(self.mHandle, ctypes.create_string_buffer(sdAnnotationPropertyId.encode('utf-8')), sdValue.mHandle)
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return None

    def getPropertyValueFromId(self, sdPropertyId, sdPropertyCategory):
        """
        Get the value of the property that matches the specified identifier in the specified category

        :param sdPropertyId: The identifier of the property we want to retrieve
        :type sdPropertyId: string
        :param sdPropertyCategory: The category of the property
        :type sdPropertyCategory: SDPropertyCategory
        :rtype: SDValue
        """
        outSDValue = ctypes.c_void_p()
        _res = self.mAPIContext.SDNode_getPropertyValueFromId(self.mHandle, ctypes.create_string_buffer(sdPropertyId.encode('utf-8')), sdPropertyCategory.value, ctypes.byref(outSDValue))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outSDValue, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outSDValue.value, ownHandle=True)

    def getInputPropertyValueFromId(self, sdPropertyId):
        """
        Get the value of the input property that matches the specified identifier

        :param sdPropertyId: The identifier of the input property we want to retrieve
        :type sdPropertyId: string
        :rtype: SDValue
        """
        outSDValue = ctypes.c_void_p()
        _res = self.mAPIContext.SDNode_getInputPropertyValueFromId(self.mHandle, ctypes.create_string_buffer(sdPropertyId.encode('utf-8')), ctypes.byref(outSDValue))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outSDValue, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outSDValue.value, ownHandle=True)

    def getAnnotationPropertyValueFromId(self, sdPropertyId):
        """
        Get the value of the annotation property that matches the specified identifier

        :param sdPropertyId: The identifier of the annotation property we want to retrieve
        :type sdPropertyId: string
        :rtype: SDValue
        """
        outSDValue = ctypes.c_void_p()
        _res = self.mAPIContext.SDNode_getAnnotationPropertyValueFromId(self.mHandle, ctypes.create_string_buffer(sdPropertyId.encode('utf-8')), ctypes.byref(outSDValue))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outSDValue, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outSDValue.value, ownHandle=True)

    def newPropertyConnection(self, sdOutputProperty, sdInputPropertyNode, sdInputProperty):
        """
        Create a new connection between an output property of the current node to an input property of another node

        :param sdOutputProperty: The output property from where to start a new connection
        :type sdOutputProperty: SDProperty
        :param sdInputPropertyNode: The other node
        :type sdInputPropertyNode: SDNode
        :param sdInputProperty: The input property of the other node that will be connected
        :type sdInputProperty: SDProperty
        :rtype: SDConnection
        """
        outSDConnection = ctypes.c_void_p()
        _res = self.mAPIContext.SDNode_newPropertyConnection(self.mHandle, sdOutputProperty.mHandle, sdInputPropertyNode.mHandle, sdInputProperty.mHandle, ctypes.byref(outSDConnection))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outSDConnection, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outSDConnection.value, ownHandle=True)

    def newPropertyConnectionFromId(self, sdOutputPropertyId, sdInputPropertyNode, sdInputPropertyId):
        """
        Create a new connection between an output property of the current node to an input property of a target node based on the properties identifiers

        :param sdOutputPropertyId: The output property identifier from where to start a new connection
        :type sdOutputPropertyId: string
        :param sdInputPropertyNode: The other node
        :type sdInputPropertyNode: SDNode
        :param sdInputPropertyId: The input property identifier of the other node that will be connected
        :type sdInputPropertyId: string
        :rtype: SDConnection
        """
        outSDConnection = ctypes.c_void_p()
        _res = self.mAPIContext.SDNode_newPropertyConnectionFromId(self.mHandle, ctypes.create_string_buffer(sdOutputPropertyId.encode('utf-8')), sdInputPropertyNode.mHandle, ctypes.create_string_buffer(sdInputPropertyId.encode('utf-8')), ctypes.byref(outSDConnection))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outSDConnection, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outSDConnection.value, ownHandle=True)

    def deletePropertyConnections(self, sdProperty):
        """
        Delete all connections of the specified property

        :param sdProperty: The SDProperty whose connections will be disconnected
        :type sdProperty: SDProperty
        :rtype: None
        """
        _res = self.mAPIContext.SDNode_deletePropertyConnections(self.mHandle, sdProperty.mHandle)
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return None

    def getPropertyConnections(self, sdProperty):
        """
        Get all connections of the specified property

        :param sdProperty: The Property we want to retrieve the connections from
        :type sdProperty: SDProperty
        :rtype: SDArray[SDConnection]
        """
        outSDConnectionArray = ctypes.c_void_p()
        _res = self.mAPIContext.SDNode_getPropertyConnections(self.mHandle, sdProperty.mHandle, ctypes.byref(outSDConnectionArray))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outSDConnectionArray, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outSDConnectionArray.value, ownHandle=True)

    def getReferencedResource(self):
        """
        Get the SDResource referenced by the current node, if any

        :rtype: SDResource
        """
        outSDResource = ctypes.c_void_p()
        _res = self.mAPIContext.SDNode_getReferencedResource(self.mHandle, ctypes.byref(outSDResource))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outSDResource, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outSDResource.value, ownHandle=True)

    def getPropertyGraph(self, sdProperty):
        """
        Get the graph that controls the specified property

        :param sdProperty: The property we want to retrieve the value from
        :type sdProperty: SDProperty
        :rtype: SDGraph
        """
        outSDGraph = ctypes.c_void_p()
        _res = self.mAPIContext.SDNode_getPropertyGraph(self.mHandle, sdProperty.mHandle, ctypes.byref(outSDGraph))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outSDGraph, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outSDGraph.value, ownHandle=True)

    def newPropertyGraph(self, sdProperty, sdGraphTypeId):
        """
        Reset the graph that controls the specified property

        :param sdProperty: The property we want to retrieve the value from
        :type sdProperty: SDProperty
        :param sdGraphTypeId: The type name of the graph to create on the property. Supported graph name depends on the node and property
        :type sdGraphTypeId: string
        :rtype: SDGraph
        """
        outSDGraph = ctypes.c_void_p()
        _res = self.mAPIContext.SDNode_newPropertyGraph(self.mHandle, sdProperty.mHandle, ctypes.create_string_buffer(sdGraphTypeId.encode('utf-8')), ctypes.byref(outSDGraph))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outSDGraph, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outSDGraph.value, ownHandle=True)

    def deletePropertyGraph(self, sdProperty):
        """
        Delete the graph that controls the specified property, and restore the previous constant value

        :param sdProperty: The property from which we want to remove the graph
        :type sdProperty: SDProperty
        :rtype: None
        """
        _res = self.mAPIContext.SDNode_deletePropertyGraph(self.mHandle, sdProperty.mHandle)
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return None

    def getIdentifier(self):
        """
        Get the node identifier in the context of its graph

        :rtype: string
        """
        outIdentifier = ctypes.c_char_p()
        _res = self.mAPIContext.SDNode_getIdentifier(self.mHandle, ctypes.byref(outIdentifier))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return outIdentifier.value.decode('utf-8')

    def newProperty(self, sdPropertyIdentifier, sdPropertyType, sdPropertyCategory):
        """
        Create a new property

        :param sdPropertyIdentifier: The identifier of the new property
        :type sdPropertyIdentifier: string
        :param sdPropertyType: The type of the new property
        :type sdPropertyType: SDType
        :param sdPropertyCategory: The category of the property
        :type sdPropertyCategory: SDPropertyCategory
        :rtype: SDProperty
        """
        outSDProperty = ctypes.c_void_p()
        _res = self.mAPIContext.SDNode_newProperty(self.mHandle, ctypes.create_string_buffer(sdPropertyIdentifier.encode('utf-8')), sdPropertyType.mHandle, sdPropertyCategory.value, ctypes.byref(outSDProperty))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outSDProperty, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outSDProperty.value, ownHandle=True)

    def deleteProperty(self, sdProperty):
        """
        Delete the specified property

        :param sdProperty: The property to remove
        :type sdProperty: SDProperty
        :rtype: None
        """
        _res = self.mAPIContext.SDNode_deleteProperty(self.mHandle, sdProperty.mHandle)
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return None

