# ADOBE CONFIDENTIAL
#
# Copyright 2020 Adobe
# All Rights Reserved.
#
# NOTICE:  Adobe permits you to use, modify, and distribute this file in
# accordance with the terms of the Adobe license agreement accompanying it.
# If you have received this file from a source other than Adobe,
# then your use, modification, or distribution of it requires the prior
# written permission of Adobe.
#
# Autogenerated by ipa. Don't edit directly, edit the definitions and regenerate it when changing
#

import ctypes
import base64
import sd
from .sdapiobject import SDAPIObject
from .sdbasetypes import ColorRGB
from .sdbasetypes import ColorRGBA
from .sdapiobject import SDApiError
from .apiexception import APIException

class SDColorSpace(SDAPIObject):
    """
    A set of helper functions to convert colors from one color-space to another
    """
    def __init__(self, APIContext, handle, *args, **kwargs):
        """
        Constructor

        :rtype: SDColorSpace
        """
        SDAPIObject.__init__(self, APIContext, handle, *args, **kwargs)

    @staticmethod
    def sConvert(value, valueColorSpaceName, dstColorSpaceName):
        """
        Convert a float value from one color space to another. Supported color space names are: 'sRGB', 'Linear'

        :param value: The float value to convert
        :type value: float
        :param valueColorSpaceName: The color space of the provided value
        :type valueColorSpaceName: string
        :param dstColorSpaceName: The color space wanted for the output value
        :type dstColorSpaceName: string
        :rtype: float
        """
        outValue = ctypes.c_float()
        _res = sd.getContext().SDColorSpace_sConvert(value, ctypes.create_string_buffer(valueColorSpaceName.encode('utf-8')), ctypes.create_string_buffer(dstColorSpaceName.encode('utf-8')), ctypes.byref(outValue))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return outValue.value

    @staticmethod
    def sConvertColorRGB(value, valueColorSpaceName, dstColorSpaceName):
        """
        Convert a ColorRGB value from one color space to another. Supported color space names are: 'sRGB', 'Linear'

        :param value: The float value to convert
        :type value: ColorRGB
        :param valueColorSpaceName: The color space of the provided value
        :type valueColorSpaceName: string
        :param dstColorSpaceName: The color space wanted for the output value
        :type dstColorSpaceName: string
        :rtype: ColorRGB
        """
        outValue = ColorRGB()
        _res = sd.getContext().SDColorSpace_sConvertColorRGB(ctypes.byref(value), ctypes.create_string_buffer(valueColorSpaceName.encode('utf-8')), ctypes.create_string_buffer(dstColorSpaceName.encode('utf-8')), ctypes.byref(outValue))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return outValue

    @staticmethod
    def sConvertColorRGBA(value, valueColorSpaceName, dstColorSpaceName):
        """
        Convert a ColorRGBA value from one color space to another. Supported color space names are: 'sRGB', 'Linear'. Alpha component is left unchanged

        :param value: The float value to convert
        :type value: ColorRGBA
        :param valueColorSpaceName: The color space of the provided value
        :type valueColorSpaceName: string
        :param dstColorSpaceName: The color space wanted for the output value
        :type dstColorSpaceName: string
        :rtype: ColorRGBA
        """
        outValue = ColorRGBA()
        _res = sd.getContext().SDColorSpace_sConvertColorRGBA(ctypes.byref(value), ctypes.create_string_buffer(valueColorSpaceName.encode('utf-8')), ctypes.create_string_buffer(dstColorSpaceName.encode('utf-8')), ctypes.byref(outValue))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return outValue

