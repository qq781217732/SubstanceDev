# ADOBE CONFIDENTIAL
#
# Copyright 2020 Adobe
# All Rights Reserved.
#
# NOTICE:  Adobe permits you to use, modify, and distribute this file in
# accordance with the terms of the Adobe license agreement accompanying it.
# If you have received this file from a source other than Adobe,
# then your use, modification, or distribution of it requires the prior
# written permission of Adobe.
#
# Autogenerated by ipa. Don't edit directly, edit the definitions and regenerate it when changing
#

import ctypes
import base64
from ..sdproperty import SDProperty
from ..sdnode import SDNode
from ..sdapiobject import SDAPIObject
from ..sdproperty import SDPropertyCategory
from ..sdproperty import SDPropertyInheritanceMethod
from ..sdapiobject import SDApiError
from ..apiexception import APIException

class SDSBSCompNode(SDNode):
    """
    Class managing a Substance compositing node
    """
    def __init__(self, APIContext, handle, *args, **kwargs):
        """
        Constructor

        :rtype: SDSBSCompNode
        """
        SDNode.__init__(self, APIContext, handle, *args, **kwargs)

    def getPropertyInheritanceMethod(self, sdProperty):
        """
        For properties that support it, get the inheritance method of the specified property

        :param sdProperty: The property from which to get the inheritance method
        :type sdProperty: SDProperty
        :rtype: SDPropertyInheritanceMethod
        """
        outInheritanceMethod = ctypes.c_int()
        _res = self.mAPIContext.SDSBSCompNode_getPropertyInheritanceMethod(self.mHandle, sdProperty.mHandle, ctypes.byref(outInheritanceMethod))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return SDPropertyInheritanceMethod(outInheritanceMethod.value)

    def getInputPropertyInheritanceMethodFromId(self, sdPropertyId):
        """
        For input properties that support it, get the inheritance method of the specified property from its Id

        :param sdPropertyId: The Id of the input property for which to set the inheritance method
        :type sdPropertyId: string
        :rtype: SDPropertyInheritanceMethod
        """
        outInheritanceMethod = ctypes.c_int()
        _res = self.mAPIContext.SDSBSCompNode_getInputPropertyInheritanceMethodFromId(self.mHandle, ctypes.create_string_buffer(sdPropertyId.encode('utf-8')), ctypes.byref(outInheritanceMethod))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return SDPropertyInheritanceMethod(outInheritanceMethod.value)

    def setPropertyInheritanceMethod(self, sdProperty, inheritanceMethod):
        """
        For properties that support it, set the inheritance method of the specified property

        :param sdProperty: The property for which to set the inheritance method
        :type sdProperty: SDProperty
        :param inheritanceMethod: The inheritance method to set on the property
        :type inheritanceMethod: SDPropertyInheritanceMethod
        :rtype: None
        """
        _res = self.mAPIContext.SDSBSCompNode_setPropertyInheritanceMethod(self.mHandle, sdProperty.mHandle, inheritanceMethod.value)
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return None

    def setInputPropertyInheritanceMethodFromId(self, sdPropertyId, inheritanceMethod):
        """
        For input properties that support it, set the inheritance method of the specified property from its Id

        :param sdPropertyId: The Id of the input property for which to set the inheritance method
        :type sdPropertyId: string
        :param inheritanceMethod: The inheritance method to set on the property
        :type inheritanceMethod: SDPropertyInheritanceMethod
        :rtype: None
        """
        _res = self.mAPIContext.SDSBSCompNode_setInputPropertyInheritanceMethodFromId(self.mHandle, ctypes.create_string_buffer(sdPropertyId.encode('utf-8')), inheritanceMethod.value)
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return None

