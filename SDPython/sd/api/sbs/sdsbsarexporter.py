# ADOBE CONFIDENTIAL
#
# Copyright 2020 Adobe
# All Rights Reserved.
#
# NOTICE:  Adobe permits you to use, modify, and distribute this file in
# accordance with the terms of the Adobe license agreement accompanying it.
# If you have received this file from a source other than Adobe,
# then your use, modification, or distribution of it requires the prior
# written permission of Adobe.
#
# Autogenerated by ipa. Don't edit directly, edit the definitions and regenerate it when changing
#

import ctypes
import base64
import sd
from enum import Enum
from ..sdpackage import SDPackage
from ..sdapiobject import SDAPIObject
from ..sdapiobject import SDApiError
from ..apiexception import APIException

class SDCompressionMode(Enum):
    """
    Enum representing the compression mode of the data in the sbsar
    """
    """Automatic mode depending of the data type"""
    Auto = 0
    """Slow encode/decode"""
    Best = 1
    """Fast encode/decode"""
    NoCompression = 2

class SDSBSARExporter(SDAPIObject):
    """
    Utility to export SBS Package
    """
    def __init__(self, APIContext, handle, *args, **kwargs):
        """
        Constructor

        :rtype: SDSBSARExporter
        """
        SDAPIObject.__init__(self, APIContext, handle, *args, **kwargs)

    @staticmethod
    def sNew():
        """
        Create a new SDSBSARExporter instance

        :rtype: SDSBSARExporter
        """
        outSDSBSARExporter = ctypes.c_void_p()
        _res = sd.getContext().SDSBSARExporter_sNew(ctypes.byref(outSDSBSARExporter))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = sd.getContext().mTypeMap[SDAPIObject(sd.getContext(), outSDSBSARExporter, ownHandle=False).getClassName()]
        return constructor(sd.getContext(), outSDSBSARExporter.value, ownHandle=True)

    def setIconEnabled(self, value):
        """
        Specify if the icon is in the sbsar

        :param value: The value that indicates if the icon has to be in the sbsar
        :type value: bool
        :rtype: None
        """
        _res = self.mAPIContext.SDSBSARExporter_setIconEnabled(self.mHandle, value)
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return None

    def setExposeOutputSize(self, value):
        """
        Specify if the "outputsize" parameter is exposed in the sbsar

        :param value: The value that indicates if the "outputsize" parameter is exposed in the sbsar
        :type value: bool
        :rtype: None
        """
        _res = self.mAPIContext.SDSBSARExporter_setExposeOutputSize(self.mHandle, value)
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return None

    def setExposePixelSize(self, value):
        """
        Specify if the "pixelsize" parameter is exposed in the sbsar

        :param value: The value that indicates if the "pixelsize" parameter is exposed in the sbsar
        :type value: bool
        :rtype: None
        """
        _res = self.mAPIContext.SDSBSARExporter_setExposePixelSize(self.mHandle, value)
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return None

    def setExposeRandomSeed(self, value):
        """
        Specify if the "randomseed" parameter is exposed in the sbsar

        :param value: The value that indicates if the "randomseed" parameter is exposed in the sbsar
        :type value: bool
        :rtype: None
        """
        _res = self.mAPIContext.SDSBSARExporter_setExposeRandomSeed(self.mHandle, value)
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return None

    def setCompressionMode(self, sdCompressionMode):
        """
        Specify the data compression mode (See SDCompressionMode enum)

        :param sdCompressionMode: The value that indicates if the the data compression mode (See SDCompressionMode enum)
        :type sdCompressionMode: SDCompressionMode
        :rtype: None
        """
        _res = self.mAPIContext.SDSBSARExporter_setCompressionMode(self.mHandle, sdCompressionMode.value)
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return None

    def exportPackageToSBSAR(self, sdPackage, sbsarOutputFilePath):
        """
        Export the specified SDPackage to the specified .sbsar file. The specified package will be automatically saved. If the package has not been saved already, the operation will fail

        :param sdPackage: The SDPackage to export.
        :type sdPackage: SDPackage
        :param sbsarOutputFilePath: The file path of the .sbsar file that will be generated
        :type sbsarOutputFilePath: string
        :rtype: None
        """
        _res = self.mAPIContext.SDSBSARExporter_exportPackageToSBSAR(self.mHandle, sdPackage.mHandle, ctypes.create_string_buffer(sbsarOutputFilePath.encode('utf-8')))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return None

