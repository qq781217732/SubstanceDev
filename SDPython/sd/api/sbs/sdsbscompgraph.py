# ADOBE CONFIDENTIAL
#
# Copyright 2020 Adobe
# All Rights Reserved.
#
# NOTICE:  Adobe permits you to use, modify, and distribute this file in
# accordance with the terms of the Adobe license agreement accompanying it.
# If you have received this file from a source other than Adobe,
# then your use, modification, or distribution of it requires the prior
# written permission of Adobe.
#
# Autogenerated by ipa. Don't edit directly, edit the definitions and regenerate it when changing
#

import ctypes
import base64
import sd
from ..sdapiobject import SDAPIObject
from ..sdproperty import SDProperty
from ..sdtexture import SDTexture
from ..sdgraph import SDGraph
from ..sdapiobject import SDApiError
from ..sdproperty import SDPropertyCategory
from ..sdproperty import SDPropertyInheritanceMethod
from ..sdtexture import SBSPixelFormat
from ..apiexception import APIException

class SDSBSCompGraph(SDGraph):
    """
    Class managing a Substance compositing graph
    """
    def __init__(self, APIContext, handle, *args, **kwargs):
        """
        Constructor

        :rtype: SDSBSCompGraph
        """
        SDGraph.__init__(self, APIContext, handle, *args, **kwargs)

    @staticmethod
    def sNew(parent):
        """
        Create a new SDSBSCompGraph under the specified parent

        :param parent: The parent data that will contains the newly created compositing graph. Can be SDPackage or SDResourceFolder
        :type parent: SDAPIObject
        :rtype: SDSBSCompGraph
        """
        outResource = ctypes.c_void_p()
        _res = sd.getContext().SDSBSCompGraph_sNew(parent.mHandle, ctypes.byref(outResource))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = sd.getContext().mTypeMap[SDAPIObject(sd.getContext(), outResource, ownHandle=False).getClassName()]
        return constructor(sd.getContext(), outResource.value, ownHandle=True)

    def compute(self):
        """
        Compute the SBSGraph. Ensure all graph outputs textures are available and up to date. This function blocks the execution until completion

        :rtype: None
        """
        _res = self.mAPIContext.SDSBSCompGraph_compute(self.mHandle)
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return None

    def getPropertyInheritanceMethod(self, sdProperty):
        """
        For graph properties that support it, retrieve the inheritance method of the specified property. See 'SDPropertyInheritanceMethod'

        :param sdProperty: The property we want to query the inheritance method
        :type sdProperty: SDProperty
        :rtype: SDPropertyInheritanceMethod
        """
        outInheritanceMethod = ctypes.c_int()
        _res = self.mAPIContext.SDSBSCompGraph_getPropertyInheritanceMethod(self.mHandle, sdProperty.mHandle, ctypes.byref(outInheritanceMethod))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return SDPropertyInheritanceMethod(outInheritanceMethod.value)

    def setPropertyInheritanceMethod(self, sdProperty, inheritanceMethod):
        """
        For graph properties that support it, set the inheritance method of the specified property. See 'SDPropertyInheritanceMethod'

        :param sdProperty: The property we want to set the inheritance method
        :type sdProperty: SDProperty
        :param inheritanceMethod: The inheritance method to set on the property
        :type inheritanceMethod: SDPropertyInheritanceMethod
        :rtype: None
        """
        _res = self.mAPIContext.SDSBSCompGraph_setPropertyInheritanceMethod(self.mHandle, sdProperty.mHandle, inheritanceMethod.value)
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return None

    def setIcon(self, sdTexture):
        """
        Helper used to set the icon of the graph

        :param sdTexture: The texture that will be used as icon
        :type sdTexture: SDTexture
        :rtype: None
        """
        _res = self.mAPIContext.SDSBSCompGraph_setIcon(self.mHandle, sdTexture.mHandle)
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return None

