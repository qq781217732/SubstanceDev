# ADOBE CONFIDENTIAL
#
# Copyright 2020 Adobe
# All Rights Reserved.
#
# NOTICE:  Adobe permits you to use, modify, and distribute this file in
# accordance with the terms of the Adobe license agreement accompanying it.
# If you have received this file from a source other than Adobe,
# then your use, modification, or distribution of it requires the prior
# written permission of Adobe.
#
# Autogenerated by ipa. Don't edit directly, edit the definitions and regenerate it when changing
#

import ctypes
import base64
import sd
from .sdtypestruct import *
from .sdproperty import *
from .sdvalue import *
from .sdapiobject import *
from .sdproperty import *
from .sdproperty import *
from .sdapiobject import *
from .apiexception import APIException

class SDValueStruct(SDValue):
    def __init__(self, APIContext, handle, *args, **kwargs):
        """
        Constructor

        :rtype: SDValueStruct
        """
        SDValue.__init__(self, APIContext, handle, *args, **kwargs)

    @staticmethod
    def sNew(sdTypeStruct):
        """
        Create a new SDValueStruct from a SDTypeStruct

        :param sdTypeStruct: The SDTypeStruct to use to instantiate the SDValueStruct
        :type sdTypeStruct: SDTypeStruct
        :rtype: SDValueStruct
        """
        outSDValueStruct = ctypes.c_void_p()
        _res = sd.getContext().SDValueStruct_sNew(sdTypeStruct.mHandle, ctypes.byref(outSDValueStruct))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = sd.getContext().mTypeMap[SDAPIObject(sd.getContext(), outSDValueStruct, ownHandle=False).getClassName()]
        return constructor(sd.getContext(), outSDValueStruct.value, ownHandle=True)

    def getPropertyValue(self, sdProperty):
        """
        Get the value of the specified struct property

        :param sdProperty: The property we want to retrieve the value from
        :type sdProperty: SDProperty
        :rtype: SDValue
        """
        outSDValue = ctypes.c_void_p()
        _res = self.mAPIContext.SDValueStruct_getPropertyValue(self.mHandle, sdProperty.mHandle, ctypes.byref(outSDValue))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outSDValue, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outSDValue.value, ownHandle=True)

    def setPropertyValue(self, sdProperty, sdValue):
        """
        Set the value of the specified struct property

        :param sdProperty: The property to change
        :type sdProperty: SDProperty
        :param sdValue: The value to set
        :type sdValue: SDValue
        :rtype: None
        """
        _res = self.mAPIContext.SDValueStruct_setPropertyValue(self.mHandle, sdProperty.mHandle, sdValue.mHandle)
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return None

    def getPropertyValueFromId(self, sdPropertyId):
        """
        Get the value of the specified property given its string identifier

        :param sdPropertyId: The identifier of the property to get the value from
        :type sdPropertyId: string
        :rtype: SDValue
        """
        outValue = ctypes.c_void_p()
        _res = self.mAPIContext.SDValueStruct_getPropertyValueFromId(self.mHandle, ctypes.create_string_buffer(sdPropertyId.encode('utf-8')), ctypes.byref(outValue))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outValue, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outValue.value, ownHandle=True)

    def setPropertyValueFromId(self, sdPropertyId, sdValue):
        """
        Set the value of the specified struct property from its identifier

        :param sdPropertyId: The identifier of the property to set
        :type sdPropertyId: string
        :param sdValue: The value to set
        :type sdValue: SDValue
        :rtype: None
        """
        _res = self.mAPIContext.SDValueStruct_setPropertyValueFromId(self.mHandle, ctypes.create_string_buffer(sdPropertyId.encode('utf-8')), sdValue.mHandle)
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None
            raise APIException(SDApiError(_res))
        return None

